diff --git a/FINANCIERONEW/.classpath b/FINANCIERONEW/.classpath
index 6a9e136..21e7ae4 100644
--- a/FINANCIERONEW/.classpath
+++ b/FINANCIERONEW/.classpath
@@ -1,20 +1,30 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry exported="true" kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
-	<classpathentry exported="true" kind="con" path="melibrary.com.genuitec.eclipse.j2eedt.core.MYECLIPSE_JAVAEE_5_CONTAINER"/>
-	<classpathentry kind="con" path="melibrary.com.genuitec.eclipse.ws.xfire.MYECLIPSE_XFIRE_CORE"/>
-	<classpathentry kind="con" path="melibrary.com.genuitec.eclipse.ws.xfire.MYECLIPSE_XFIRE_JAXB2"/>
-	<classpathentry kind="con" path="melibrary.com.genuitec.eclipse.ws.xfire.MYECLIPSE_XFIRE_HTTP_CLIENT"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/ADMINISTRATIVONEW"/>
-	<classpathentry exported="true" kind="con" path="melibrary.com.genuitec.eclipse.hibernate.MYECLIPSE_HIBERNATE_TOOLS"/>
-	<classpathentry exported="true" kind="con" path="melibrary.com.genuitec.eclipse.hibernate.MYECLIPSE_HIBERNATE3_2_CORE"/>
-	<classpathentry exported="true" kind="con" path="melibrary.com.genuitec.eclipse.hibernate.MYECLIPSE_HIBERNATE3_2_EXTRAS"/>
-	<classpathentry exported="true" kind="con" path="melibrary.com.genuitec.eclipse.hibernate.MYECLIPSE_HIBERNATE3_2_EM"/>
-	<classpathentry kind="lib" path="/DELFINWEBNEW/WebRoot/WEB-INF/lib/poi-3.0.1-FINAL-20070705.jar"/>
-	<classpathentry kind="lib" path="classes12.jar"/>
-	<classpathentry kind="lib" path="com.ibm.mqjms.jar"/>
-	<classpathentry kind="lib" path="jboss-annotations-ejb3.jar"/>
-	<classpathentry kind="lib" path="/DELFINWEBNEW/WebRoot/WEB-INF/lib/jasperreports-3.0.0.jar"/>
-	<classpathentry kind="output" path="classes"/>
-</classpath>
\ No newline at end of file
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry exported="true" kind="con" path="melibrary.com.genuitec.eclipse.j2eedt.core.MYECLIPSE_JAVAEE_5_CONTAINER"/>
+	<classpathentry kind="con" path="melibrary.com.genuitec.eclipse.ws.xfire.MYECLIPSE_XFIRE_CORE"/>
+	<classpathentry kind="con" path="melibrary.com.genuitec.eclipse.ws.xfire.MYECLIPSE_XFIRE_JAXB2"/>
+	<classpathentry kind="con" path="melibrary.com.genuitec.eclipse.ws.xfire.MYECLIPSE_XFIRE_HTTP_CLIENT"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/ADMINISTRATIVONEW"/>
+	<classpathentry exported="true" kind="con" path="melibrary.com.genuitec.eclipse.hibernate.MYECLIPSE_HIBERNATE_TOOLS"/>
+	<classpathentry exported="true" kind="con" path="melibrary.com.genuitec.eclipse.hibernate.MYECLIPSE_HIBERNATE3_2_CORE"/>
+	<classpathentry exported="true" kind="con" path="melibrary.com.genuitec.eclipse.hibernate.MYECLIPSE_HIBERNATE3_2_EXTRAS"/>
+	<classpathentry exported="true" kind="con" path="melibrary.com.genuitec.eclipse.hibernate.MYECLIPSE_HIBERNATE3_2_EM"/>
+	<classpathentry kind="lib" path="/DELFINWEBNEW/WebRoot/WEB-INF/lib/poi-3.0.1-FINAL-20070705.jar"/>
+	<classpathentry kind="lib" path="classes12.jar"/>
+	<classpathentry kind="lib" path="com.ibm.mqjms.jar"/>
+	<classpathentry kind="lib" path="jboss-annotations-ejb3.jar"/>
+	<classpathentry kind="lib" path="/DELFINWEBNEW/WebRoot/WEB-INF/lib/jasperreports-3.0.0.jar"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/jdk1.6.0_07">
+		<attributes>
+			<attribute name="owner.project.facets" value="java"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.jst.server.core.container/org.jboss.ide.eclipse.as.core.server.runtime.runtimeTarget/JBoss 4.2 Runtime">
+		<attributes>
+			<attribute name="owner.project.facets" value="jst.ejb"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.jst.j2ee.internal.module.container"/>
+	<classpathentry kind="output" path="classes"/>
+</classpath>
diff --git a/FINANCIERONEW/.project b/FINANCIERONEW/.project
index ad8cb28..f16645c 100644
--- a/FINANCIERONEW/.project
+++ b/FINANCIERONEW/.project
@@ -6,6 +6,11 @@
 	</projects>
 	<buildSpec>
 		<buildCommand>
+			<name>org.eclipse.wst.common.project.facet.core.builder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
 			<name>org.eclipse.jdt.core.javabuilder</name>
 			<arguments>
 			</arguments>
@@ -32,9 +37,12 @@
 		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>org.eclipse.jem.workbench.JavaEMFNature</nature>
+		<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>
 		<nature>com.genuitec.eclipse.ast.deploy.core.deploymentnature</nature>
 		<nature>com.genuitec.eclipse.j2eedt.core.ejbnature</nature>
 		<nature>org.eclipse.dali.core.persistenceNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.wst.common.project.facet.core.nature</nature>
 	</natures>
 </projectDescription>
diff --git a/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPActivaCuentaAhorroFacade.java b/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPActivaCuentaAhorroFacade.java
index b049b5a..cd51d4d 100644
--- a/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPActivaCuentaAhorroFacade.java
+++ b/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPActivaCuentaAhorroFacade.java
@@ -20,6 +20,8 @@
 import admin.contab.local.CBCorrelativoInterfaceLocal;
 import admin.contab.local.CBGeneralesFacadeInterfaceLocal;
 import admin.util.BeanGEAuditoria;
+import financ.clientes.entity.CLPersonasJuridicas;
+import financ.clientes.local.CLPersonasJuridicasInterfaceLocal;
 import financ.cuentaspasivas.beans.BeanCPActivaCuentaAhorro;
 import financ.cuentaspasivas.beans.BeanCPActivarCta_GenerarTransaccion;
 import financ.cuentaspasivas.beans.BeanCPCancelacionCuentaAHO;
@@ -78,6 +80,9 @@
 
     @EJB
     private OPBNTransaccionesFacadeInterfaceLocal opBNTransaccionesFacadeInterfaceLocal;
+    
+    @EJB
+    private CLPersonasJuridicasInterfaceLocal clPersonasJuridicasInterfaceLocal;//[Req.17-033] acnunez 20.06.2017
 
     CPCuentasPasivasFacadeLocal cpCuentasPasivasFacadeLocal = null;
 
@@ -428,6 +433,8 @@
         CPMaestroCuentas cpMaestroCuentas = beanTransaccionTX.getCpMaestroCuentas();
         CPMovimientoCuentaAhorro cpMovimientoCuentaAhorro = beanTransaccionTX.getCpMovimientoCuentaAhorro();
         String conceptoOperacionFinanciera =  beanTransaccionTX.getConceptoOperacionFinanciera();
+        String indicadorLucrativo = Constante.INDICADOR_NO_LUCRATIVO;//[Req.17-033] acnunez 20.06.2017
+        String tipoPersona = Constante.TIPO_PERSONA_NATURAL_CADENA_PROD;//[Req.17-033] acnunez 20.06.2017
         
         Long numeroTransaccionOperacion = Long.valueOf(cbCorrelativoInterfaceLocal.GenerarCorrelativo(cpMovimientoCuentaAhorro.getCodigoEmpresa(),
                                                                                                       "OPMTRAD",
@@ -465,6 +472,16 @@
         bean.setCodigoSubConcepto(cpMovimientoCuentaAhorro.getCodigoEmpresa() + cpMovimientoCuentaAhorro.getCodigoOperacion() + "999");
         bean.setMonto(cpMaestroCuentas.getMontoSaldoDisponible());
         lstSubconceptos.add(bean);
+
+        //Inicio [Req.17-033] acnunez 20.06.2017
+        if (!_isEmpty(cpMaestroCuentas)){
+            if (!_isEmpty(cpMaestroCuentas.getClClientes())){
+                CLPersonasJuridicas clPersonasJuridicas=clPersonasJuridicasInterfaceLocal.findById(cpMaestroCuentas.getClClientes().getCodigoCliente());
+                indicadorLucrativo=clPersonasJuridicas.getIndicadorLucrativo();
+                tipoPersona =  cpMaestroCuentas.getClClientes().getClPersonas().getClTipoPersona().getCodigoTipoPersona();
+            }
+        }
+        //Fin [Req.17-033]
 
         Map mapTransaccion = opBNTransaccionesFacadeInterfaceLocal.generarTransaccionFinanciera(numeroTransaccionOperacion.toString(),
                                                                                                 numeroTransaccionOperacion.toString(),// cpMovimientoCuentaAhorro.getNumeroCorrelativoTransaccion().toString(),
@@ -531,8 +548,8 @@
                                                                                              null,// columna10,
                                                                                              null,// columna11,
                                                                                              cpMaestroCuentas.getCpProductoCuenta().getCodigoProductoCuenta(),// columna12,
-                                                                                             "N",//cpMaestroCuentas.getClClientes().getClPersonas().getClTipoPersona().getCodigoTipoPersona(),// columna13,
-                                                                                             "N",// columna14,
+                                                                                             tipoPersona,// columna13,
+                                                                                             indicadorLucrativo,// columna14,
                                                                                              null,// columna15,
                                                                                              null,// columna16,
                                                                                              null,// columna17,
diff --git a/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPAnularTransaccionesFacade.java b/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPAnularTransaccionesFacade.java
index 57a8431..fec7227 100644
--- a/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPAnularTransaccionesFacade.java
+++ b/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPAnularTransaccionesFacade.java
@@ -35,167 +35,167 @@
  * 
  * @author dfujimoto
  * @since  08.11.2013
- * @see	   CPMaestroCuentasInterfaceLocal
- * @see	   CPCuentasAhorrosInterfaceLocal
- * @see	   CPMovimientoCuentaAhorroInterfaceLocal
+ * @see    CPMaestroCuentasInterfaceLocal
+ * @see    CPCuentasAhorrosInterfaceLocal
+ * @see    CPMovimientoCuentaAhorroInterfaceLocal
  */
 
 @TransactionAttribute(TransactionAttributeType.REQUIRED)
 @Stateless
 public class CPAnularTransaccionesFacade implements CPAnularTransaccionesFacadeLocal, CPAnularTransaccionesFacadeRemote{
 
-	private static String NO_ERROR = "000";
-	public static final String RemoteJNDIName =  CPAnularTransaccionesFacade.class.getSimpleName() + "/remote";
-	public static final String LocalJNDIName =   CPAnularTransaccionesFacade.class.getSimpleName() + "/local";
-	
-	@EJB
-	private CPMaestroCuentasInterfaceLocal cpMaestroCuentasInterfaceLocal;
-	
-	@EJB
-	private CPCuentasAhorrosInterfaceLocal cpCuentasAhorrosInterfaceLocal;
-	
-	@EJB
-	private CPMovimientoCuentaAhorroInterfaceLocal cpMovimientoCuentaAhorroInterfaceLocal;
-	
-	@EJB
-	private OPCabeceraTransaccionesAcumuladasInterfaceLocal opCabeceraTransaccionesAcumuladasInterfaceLocal;
-	
+    private static String NO_ERROR = "000";
+    public static final String RemoteJNDIName =  CPAnularTransaccionesFacade.class.getSimpleName() + "/remote";
+    public static final String LocalJNDIName =   CPAnularTransaccionesFacade.class.getSimpleName() + "/local";
+    
+    @EJB
+    private CPMaestroCuentasInterfaceLocal cpMaestroCuentasInterfaceLocal;
+    
+    @EJB
+    private CPCuentasAhorrosInterfaceLocal cpCuentasAhorrosInterfaceLocal;
+    
+    @EJB
+    private CPMovimientoCuentaAhorroInterfaceLocal cpMovimientoCuentaAhorroInterfaceLocal;
+    
+    @EJB
+    private OPCabeceraTransaccionesAcumuladasInterfaceLocal opCabeceraTransaccionesAcumuladasInterfaceLocal;
+    
     public Map anularTransaccion(String numeroCuenta, String numeroTransaccion, BeanGEAuditoria beanGEAuditoria){
-    	Map output=new HashMap();
-    	String error; 
-    	
-    	OPCabeceraTransaccionesAcumuladas opCabeceraTransaccionesAcumuladas = opCabeceraTransaccionesAcumuladasInterfaceLocal.findById(new Long(numeroTransaccion));
-    	
-    	CPMaestroCuentas cpMaestroCuentas = cpMaestroCuentasInterfaceLocal.findById(numeroCuenta);
-    	CPCuentasAhorros cpCuentasAhorros = cpCuentasAhorrosInterfaceLocal.findById(numeroCuenta);
-    	
-    	//Actualiza los saldos de la cuenta a la que se anulo transaccion
-    	output = actualizaSaldosCuenta(opCabeceraTransaccionesAcumuladas, cpCuentasAhorros, cpMaestroCuentas, beanGEAuditoria);
-    	error = output.get("strError").toString();
-    	
-    	if(error.equals(NO_ERROR)){
-    		//Anula movimientos relacionados a la transaccion
-    		output=anulaMovimientoCuenta(numeroTransaccion, beanGEAuditoria);	
-    		error = output.get("strError").toString();
-    	}
+        Map output=new HashMap();
+        String error; 
+        
+        OPCabeceraTransaccionesAcumuladas opCabeceraTransaccionesAcumuladas = opCabeceraTransaccionesAcumuladasInterfaceLocal.findById(new Long(numeroTransaccion));
+        
+        CPMaestroCuentas cpMaestroCuentas = cpMaestroCuentasInterfaceLocal.findById(numeroCuenta);
+        CPCuentasAhorros cpCuentasAhorros = cpCuentasAhorrosInterfaceLocal.findById(numeroCuenta);
+        
+        //Actualiza los saldos de la cuenta a la que se anulo transaccion
+        output = actualizaSaldosCuenta(opCabeceraTransaccionesAcumuladas, cpCuentasAhorros, cpMaestroCuentas, beanGEAuditoria);
+        error = output.get("strError").toString();
+        
+        if(error.equals(NO_ERROR)){
+            //Anula movimientos relacionados a la transaccion
+            output=anulaMovimientoCuenta(numeroTransaccion, beanGEAuditoria);   
+            error = output.get("strError").toString();
+        }
 
-    	return output;
+        return output;
     }
     
     
     //Actualiza Saldos en cuenta ahorros - CPMCUEN
     private Map actualizaSaldosCuenta(OPCabeceraTransaccionesAcumuladas opCabeceraTransaccionesAcumuladas, 
-    									CPCuentasAhorros cpCuentasAhorros,
-    									CPMaestroCuentas cpMaestroCuentas,  
-    									 BeanGEAuditoria beanGEAuditoria){
-    	Map output=new HashMap();
-    	
-    	//Obtiene indicador de movimiento:
-    	String indicadorMovimiento = opCabeceraTransaccionesAcumuladas.getIndicadorIngresoEgreso();
-    	
-    	//Monto de la transaccion a anular
-    	Double montoMovimiento = opCabeceraTransaccionesAcumuladas.getMontoMovimiento();
+                                        CPCuentasAhorros cpCuentasAhorros,
+                                        CPMaestroCuentas cpMaestroCuentas,  
+                                         BeanGEAuditoria beanGEAuditoria){
+        Map output=new HashMap();
+        
+        //Obtiene indicador de movimiento:
+        String indicadorMovimiento = opCabeceraTransaccionesAcumuladas.getIndicadorIngresoEgreso();
+        
+        //Monto de la transaccion a anular
+        Double montoMovimiento = opCabeceraTransaccionesAcumuladas.getMontoMovimiento();
 
-    	if(indicadorMovimiento.equals(Constante.INDICADOR_EGRESO_AHO)){
-    		output = actualizaTotalCapitalRetiro(cpCuentasAhorros, montoMovimiento, beanGEAuditoria);
-    		
-    		//Cambia el monto por la transaccion anulada en Monto total Retirado (CPMCUEN.N_TOTRET)
-        	Double montoTotalRetiradoCuenta = cpMaestroCuentas.getMontoTotalRetiradoCuenta() - montoMovimiento;
-        	cpMaestroCuentas.setMontoTotalRetiradoCuenta(montoTotalRetiradoCuenta);
-        	//Inicio [Req.15-030] fvalle 07.07.2015
-        	if(!(equiv(opCabeceraTransaccionesAcumuladas.getCodigoOperacion(), CODIGO_OPERACION_PAGO_CARGO_A_CUENTA)
-        	         &&equiv(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera(),CODIGO_OPERACION_FINANCIERA_PAGO_CARGO_A_CUENTA)
-        	         &&equiv(opCabeceraTransaccionesAcumuladas.getIndicadorMovimientoDinero(),TIPO_MOVIMIENTO_NOTA_CARGO)
-        	         &&equiv(opCabeceraTransaccionesAcumuladas.getOpCanalesOperacion().getCodigoCanal(),CANAL_OPERACION_OPERACION_ADMINISTRATIVA))){
-        	   montoMovimiento += anularITFRetiro(opCabeceraTransaccionesAcumuladas);
-        	}
+        if(indicadorMovimiento.equals(Constante.INDICADOR_EGRESO_AHO)){
+            output = actualizaTotalCapitalRetiro(cpCuentasAhorros, montoMovimiento, beanGEAuditoria);
+            
+            //Cambia el monto por la transaccion anulada en Monto total Retirado (CPMCUEN.N_TOTRET)
+            Double montoTotalRetiradoCuenta = cpMaestroCuentas.getMontoTotalRetiradoCuenta() - montoMovimiento;
+            cpMaestroCuentas.setMontoTotalRetiradoCuenta(montoTotalRetiradoCuenta);
+            //Inicio [Req.15-030] fvalle 07.07.2015
+            if(!(equiv(opCabeceraTransaccionesAcumuladas.getCodigoOperacion(), CODIGO_OPERACION_PAGO_CARGO_A_CUENTA)
+                     &&equiv(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera(),CODIGO_OPERACION_FINANCIERA_PAGO_CARGO_A_CUENTA)
+                     &&equiv(opCabeceraTransaccionesAcumuladas.getIndicadorMovimientoDinero(),TIPO_MOVIMIENTO_NOTA_CARGO)
+                     &&equiv(opCabeceraTransaccionesAcumuladas.getOpCanalesOperacion().getCodigoCanal(),CANAL_OPERACION_OPERACION_ADMINISTRATIVA))){
+               montoMovimiento += anularITFRetiro(opCabeceraTransaccionesAcumuladas);
+            }
          //Fin [Req.15-030]
-    	}else{
-        	//Cambia el monto por la transaccion anulada en Monto total Depositado (CPMCUEN.N_TOTDEP)
-        	Double montoTotalDepositadoCuenta = cpMaestroCuentas.getMontoTotalDepositadoCuenta() - montoMovimiento;
-        	cpMaestroCuentas.setMontoTotalDepositadoCuenta(montoTotalDepositadoCuenta);
-        	
-        	//Si se anula deposito, monto sera negativo para disminuir los saldos    	
-        	montoMovimiento = montoMovimiento*-1;
-    	}
-    	
-    	//Cambia el monto por la transaccion anulada en Saldo capital (CPMCUEN.N_SALCAP)
-    	Double montoSaldoCapital = cpMaestroCuentas.getMontoSaldoCapital() + montoMovimiento;
-    	cpMaestroCuentas.setMontoSaldoCapital(montoSaldoCapital);
-    	
-    	//Cambia el monto por la transaccion anulada en Saldo contable (CPMCUEN.N_SALCON)
-    	Double montoSaldoContable = cpMaestroCuentas.getMontoSaldoContable() + montoMovimiento;
-    	cpMaestroCuentas.setMontoSaldoContable(montoSaldoContable);
+        }else{
+            //Cambia el monto por la transaccion anulada en Monto total Depositado (CPMCUEN.N_TOTDEP)
+            Double montoTotalDepositadoCuenta = cpMaestroCuentas.getMontoTotalDepositadoCuenta() - montoMovimiento;
+            cpMaestroCuentas.setMontoTotalDepositadoCuenta(montoTotalDepositadoCuenta);
+            
+            //Si se anula deposito, monto sera negativo para disminuir los saldos       
+            montoMovimiento = montoMovimiento*-1;
+        }
+        
+        //Cambia el monto por la transaccion anulada en Saldo capital (CPMCUEN.N_SALCAP)
+        Double montoSaldoCapital = cpMaestroCuentas.getMontoSaldoCapital() + montoMovimiento;
+        cpMaestroCuentas.setMontoSaldoCapital(montoSaldoCapital);
+        
+        //Cambia el monto por la transaccion anulada en Saldo contable (CPMCUEN.N_SALCON)
+        Double montoSaldoContable = cpMaestroCuentas.getMontoSaldoContable() + montoMovimiento;
+        cpMaestroCuentas.setMontoSaldoContable(montoSaldoContable);
 
-    	//Cambia el monto por la transaccion anulada en Saldo Disponible (CPMCUEN.N_SALDIS)
-    	Double montoSaldoDisponible = cpMaestroCuentas.getMontoSaldoDisponible() + montoMovimiento;
-    	cpMaestroCuentas.setMontoSaldoDisponible(montoSaldoDisponible);
-    	
-    	//Cambia el monto por la transaccion anulada en Monto total Disponible (CPMCUEN.N_DISRET)
-    	Double montoTotalDisponibleRetirar = cpMaestroCuentas.getMontoTotalDisponibleRetirar() + montoMovimiento;
-    	cpMaestroCuentas.setMontoTotalDisponibleRetirar(montoTotalDisponibleRetirar);
+        //Cambia el monto por la transaccion anulada en Saldo Disponible (CPMCUEN.N_SALDIS)
+        Double montoSaldoDisponible = cpMaestroCuentas.getMontoSaldoDisponible() + montoMovimiento;
+        cpMaestroCuentas.setMontoSaldoDisponible(montoSaldoDisponible);
+        
+        //Cambia el monto por la transaccion anulada en Monto total Disponible (CPMCUEN.N_DISRET)
+        Double montoTotalDisponibleRetirar = cpMaestroCuentas.getMontoTotalDisponibleRetirar() + montoMovimiento;
+        cpMaestroCuentas.setMontoTotalDisponibleRetirar(montoTotalDisponibleRetirar);
 
-    	try {
-			cpMaestroCuentasInterfaceLocal.update(cpMaestroCuentas, beanGEAuditoria);
-		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			output.put("strError", "001");
-			e.printStackTrace();
-		}
-		output.put("strError", NO_ERROR);
-		return output;
+        try {
+            cpMaestroCuentasInterfaceLocal.update(cpMaestroCuentas, beanGEAuditoria);
+        } catch (Exception e) {
+            // TODO Auto-generated catch block
+            output.put("strError", "001");
+            e.printStackTrace();
+        }
+        output.put("strError", NO_ERROR);
+        return output;
     }
     
     //Anula movimiento de cuenta ahorro - CPDMAHO
     private Map anulaMovimientoCuenta(String numeroTransaccion, BeanGEAuditoria beanGEAuditoria){
-    	Map output=new HashMap();
-    	
-    	List lstMovimientosCuentaAhorro= cpMovimientoCuentaAhorroInterfaceLocal.findByNumeroCorrelativoTransaccion(new Long(numeroTransaccion)) ;
+        Map output=new HashMap();
+        
+        List lstMovimientosCuentaAhorro= cpMovimientoCuentaAhorroInterfaceLocal.findByNumeroCorrelativoTransaccion(new Long(numeroTransaccion)) ;
 
-    	for (int i = 0; i < lstMovimientosCuentaAhorro.size(); i++) {
-			CPMovimientoCuentaAhorro cpMovimientoCuentaAhorro = (CPMovimientoCuentaAhorro)lstMovimientosCuentaAhorro.get(i);
-			cpMovimientoCuentaAhorro.setEstadoMovimiento(Constante.EST_MOV_ANULADO_AHO);
-			try {
-				cpMovimientoCuentaAhorroInterfaceLocal.update(cpMovimientoCuentaAhorro, beanGEAuditoria);
-			} catch (Exception e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-				output.put("strError", "001");
-			}
-		}
-		output.put("strError", NO_ERROR);
-		return output;
+        for (int i = 0; i < lstMovimientosCuentaAhorro.size(); i++) {
+            CPMovimientoCuentaAhorro cpMovimientoCuentaAhorro = (CPMovimientoCuentaAhorro)lstMovimientosCuentaAhorro.get(i);
+            cpMovimientoCuentaAhorro.setEstadoMovimiento(Constante.EST_MOV_ANULADO_AHO);
+            try {
+                cpMovimientoCuentaAhorroInterfaceLocal.update(cpMovimientoCuentaAhorro, beanGEAuditoria);
+            } catch (Exception e) {
+                // TODO Auto-generated catch block
+                e.printStackTrace();
+                output.put("strError", "001");
+            }
+        }
+        output.put("strError", NO_ERROR);
+        return output;
     }
     
     //Actualiza el Total del capital retirado, sumando el monto del retiro anulado
     private Map actualizaTotalCapitalRetiro(CPCuentasAhorros cpCuentasAhorros, Double montoMovimiento, BeanGEAuditoria beanGEAuditoria){
-    	Map output=new HashMap();
-    	cpCuentasAhorros.setMontoTotalCapitalRetirad(montoMovimiento);
-    	try {
-			cpCuentasAhorrosInterfaceLocal.update(cpCuentasAhorros, beanGEAuditoria);
-    	} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-			output.put("strError", "001");
-		}
-		output.put("strError", NO_ERROR);
-    	return output;
+        Map output=new HashMap();
+        cpCuentasAhorros.setMontoTotalCapitalRetirad(montoMovimiento);
+        try {
+            cpCuentasAhorrosInterfaceLocal.update(cpCuentasAhorros, beanGEAuditoria);
+        } catch (Exception e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+            output.put("strError", "001");
+        }
+        output.put("strError", NO_ERROR);
+        return output;
     }
     
     //Suma ITF descontado al realizar el retiro
     private Double anularITFRetiro(OPCabeceraTransaccionesAcumuladas opCabeceraTransaccionesAcumuladas){
-    	List<OPCabeceraTransaccionesAcumuladas> lstTransaccionesAcumuladas = opCabeceraTransaccionesAcumuladasInterfaceLocal.findByNumeroGrupoTransaccion(opCabeceraTransaccionesAcumuladas.getNumeroGrupoTransaccion());
-    	Double montoITF = 0.0; 
-    	if(lstTransaccionesAcumuladas != null && lstTransaccionesAcumuladas.size()>0){
-        	for (int i = 0; i < lstTransaccionesAcumuladas.size(); i++) {
-        		OPCabeceraTransaccionesAcumuladas tmpTransaccionAcumulada = lstTransaccionesAcumuladas.get(i);
-        		if(tmpTransaccionAcumulada.getCodigoOperacion().equals(Constante.COD_OPERACION_ITF)){
-        			montoITF += tmpTransaccionAcumulada.getMontoMovimiento();
-    			}
-    		}
-    	}
+        List<OPCabeceraTransaccionesAcumuladas> lstTransaccionesAcumuladas = opCabeceraTransaccionesAcumuladasInterfaceLocal.findByNumeroGrupoTransaccion(opCabeceraTransaccionesAcumuladas.getNumeroGrupoTransaccion());
+        Double montoITF = 0.0; 
+        if(lstTransaccionesAcumuladas != null && lstTransaccionesAcumuladas.size()>0){
+            for (int i = 0; i < lstTransaccionesAcumuladas.size(); i++) {
+                OPCabeceraTransaccionesAcumuladas tmpTransaccionAcumulada = lstTransaccionesAcumuladas.get(i);
+                if(tmpTransaccionAcumulada.getCodigoOperacion().equals(Constante.COD_OPERACION_ITF)){
+                    montoITF += tmpTransaccionAcumulada.getMontoMovimiento();
+                }
+            }
+        }
 
-    	return montoITF;
+        return montoITF;
     }
-	
+    
 }
diff --git a/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPCuentasAhorrosFacade.java b/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPCuentasAhorrosFacade.java
index 4cc7ade..4c4127e 100644
--- a/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPCuentasAhorrosFacade.java
+++ b/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPCuentasAhorrosFacade.java
@@ -1103,249 +1103,218 @@
                               null);
    }
 
-   private String depositoAhorro(
-         CPMaestroCuentas cpMaestroCuentas,
-         CBConceptoOperacion cbConceptoOperacion, 
-         String  codigoEmpresa,
-         String  codigoAgencia,
-         String  codigoCliente,
-         String  codigoConceptoOperacion,
-         String  codigoSubConceptoOperacion,
-         Date    fechaOperacion,
-         String  horaOperacion,
-         String  codigoMoneda,
-         Double  monto,
-         String  codigoMonedaOperacion, 
-         Double  montoMonedaOperacion,
-         String  numeroCuenta,
-         Double  valorTipoCambio,
-         Long numeroOrdenPago, 
-         String  numeroReferencia,
-         String  numeroLargoCuentaBancaria,
-         String  indicadorAporteExtra,
-         Double  montoEfectivizar,
-         String  tipoPago,
-         Long    numeroTransac, 
-         Long numeroOperacion,
-         String  numeroGrupoTransaccion,
-         String  indicadorOperacionPrincipal,   
-         String  codigoEntidadManejadora,
-         String  conceptoOperacionFinanciera,
-         String  credito, //dfujimoto
-         String  depositante, //dfujimoto
-         String  nroDocumento, //dfujimoto
-         List lstImpuestos,
-         Date fechaValor,
-         String  usuario,
-         String  terminal,
-         String  ip,
-         GenericBean genericBean) throws Exception {
+    private String depositoAhorro(CPMaestroCuentas cpMaestroCuentas,
+                                  CBConceptoOperacion cbConceptoOperacion,
+                                  String codigoEmpresa,
+                                  String codigoAgencia,
+                                  String codigoCliente,
+                                  String codigoConceptoOperacion,
+                                  String codigoSubConceptoOperacion,
+                                  Date fechaOperacion,
+                                  String horaOperacion,
+                                  String codigoMoneda,
+                                  Double monto,
+                                  String codigoMonedaOperacion,
+                                  Double montoMonedaOperacion,
+                                  String numeroCuenta,
+                                  Double valorTipoCambio,
+                                  Long numeroOrdenPago,
+                                  String numeroReferencia,
+                                  String numeroLargoCuentaBancaria,
+                                  String indicadorAporteExtra,
+                                  Double montoEfectivizar,
+                                  String tipoPago,
+                                  Long numeroTransac,
+                                  Long numeroOperacion,
+                                  String numeroGrupoTransaccion,
+                                  String indicadorOperacionPrincipal,
+                                  String codigoEntidadManejadora,
+                                  String conceptoOperacionFinanciera,
+                                  String credito, //dfujimoto
+                                  String depositante, //dfujimoto
+                                  String nroDocumento, //dfujimoto
+                                  List lstImpuestos,
+                                  Date fechaValor,
+                                  String usuario,
+                                  String terminal,
+                                  String ip,
+                                  GenericBean genericBean) throws Exception {
         // Fin [Req.S17-023] kdelacruz 18.05.2017
 
-      //******************************************************************************************************************
-      //
-      //
-      //+++DEFINICION DE OBJETOS Y VARIABLES+++
-      //
-      //
-      //******************************************************************************************************************       
+        //******************************************************************************************************************
+        //
+        //
+        //+++DEFINICION DE OBJETOS Y VARIABLES+++
+        //
+        //
+        //******************************************************************************************************************       
 
-      CLPersonas clPersonas = null;
-      CPCuentasAhorros cpCuentasAhorros = null;
-      //Iterator iter = null;
-      //boolean isCompraVenta = false;
-      BigDecimal montoOperacion = new BigDecimal(0);
-      String errorCode = null;
-      String estadoCuentaGuardado = null;
-      java.util.Date ahFechaUltimoMovimiento = null;
-      int ahCorrelativoMovimiento = 0;
-      Double ahMontoSaldoDisponibleAntesMovimiento = new Double(0);
-      Double ahMontoSaldoContableAntesMovimiento = new Double(0);
-      Double ahMontoSaldoCapitalAntesMovimiento = new Double(0);
-      Double ahMontoSaldoInteresAntesMovimiento = new Double(0);
-      Double ahMontoTotalChequesAntesMovimiento = new Double(0);
-      Double ahMontoTotalDisponibleRetirarAntesMovimiento = new Double(0);
-      Double ahMontoTotalDepositadoAntesMovimiento = new Double(0);
-      BigDecimal ahMontoSaldoDisponible = new BigDecimal(0);
-      BigDecimal ahMontoSaldoContable = new BigDecimal(0);
-      BigDecimal ahMontoTotalCheques = new BigDecimal(0);
-      BigDecimal ahMontoTotalDisponibleRetirar = new BigDecimal(0);
-      BigDecimal ahMontoSaldoCapital = new BigDecimal(0);
-      //BigDecimal ahMontoBloqueadoObtenido = new BigDecimal(0);
-      BigDecimal ahMontoTotalDepositado = new BigDecimal(0);
-      //dfujimoto
-      Double montoTotal = monto;
+        CLPersonas clPersonas = null;
+        CPCuentasAhorros cpCuentasAhorros = null;
+        //Iterator iter = null;
+        //boolean isCompraVenta = false;
+        BigDecimal montoOperacion = new BigDecimal(0);
+        String errorCode = null;
+        String estadoCuentaGuardado = null;
+        java.util.Date ahFechaUltimoMovimiento = null;
+        int ahCorrelativoMovimiento = 0;
+        Double ahMontoSaldoDisponibleAntesMovimiento = new Double(0);
+        Double ahMontoSaldoContableAntesMovimiento = new Double(0);
+        Double ahMontoSaldoCapitalAntesMovimiento = new Double(0);
+        Double ahMontoSaldoInteresAntesMovimiento = new Double(0);
+        Double ahMontoTotalChequesAntesMovimiento = new Double(0);
+        Double ahMontoTotalDisponibleRetirarAntesMovimiento = new Double(0);
+        Double ahMontoTotalDepositadoAntesMovimiento = new Double(0);
+        BigDecimal ahMontoSaldoDisponible = new BigDecimal(0);
+        BigDecimal ahMontoSaldoContable = new BigDecimal(0);
+        BigDecimal ahMontoTotalCheques = new BigDecimal(0);
+        BigDecimal ahMontoTotalDisponibleRetirar = new BigDecimal(0);
+        BigDecimal ahMontoSaldoCapital = new BigDecimal(0);
+        //BigDecimal ahMontoBloqueadoObtenido = new BigDecimal(0);
+        BigDecimal ahMontoTotalDepositado = new BigDecimal(0);
+        //dfujimoto
+        Double montoTotal = monto;
 
-      try {
-         //******************************************************************************************************************
-         //
-         //
-         //+++VALIDACIONES PREVIAS SEGUN REGLAS DEL NEGOCIO+++
-         //
-         //
-         //******************************************************************************************************************
-         InitialContext context=new InitialContext();
-         CPCuentasPasivasFacadeLocal cpCuentasPasivasFacadeLocal=(CPCuentasPasivasFacadeLocal)context.lookup("CPCuentasPasivasFacade/local");
-         
-         clPersonas = clPersonasInterfaceLocal.findById(cpMaestroCuentas.getClClientes()
-               .getCodigoCliente());
-         cpCuentasAhorros = cpCuentasAhorrosInterfaceLocal.findById(cpMaestroCuentas
-               .getNumeroCuenta());
-         if (cpCuentasAhorros == null) {
-            return "999";
-         }
-         
-         BeanGEAuditoria beanGEAuditoriaGrabar=new BeanGEAuditoria(new Date(System.currentTimeMillis()),
-               usuario,
-               terminal,
-               ip,
-               new Date(System.currentTimeMillis()),
-               usuario,
-               terminal,
-               ip);
-         BeanGEAuditoria beanGEAuditoriaActualizar=new BeanGEAuditoria(new Date(System.currentTimeMillis()),
-               usuario,
-               terminal,
-               ip);
-         //
-         // Obtener monto de operacion en moneda de la cuenta
-         //
-         //isCompraVenta = !codigoMonedaOperacion
+        try {
+            //******************************************************************************************************************
+            //+++VALIDACIONES PREVIAS SEGUN REGLAS DEL NEGOCIO+++
+            //******************************************************************************************************************
+            InitialContext context = new InitialContext();
+            CPCuentasPasivasFacadeLocal cpCuentasPasivasFacadeLocal = (CPCuentasPasivasFacadeLocal) context.lookup("CPCuentasPasivasFacade/local");
+
+            clPersonas = clPersonasInterfaceLocal.findById(cpMaestroCuentas.getClClientes().getCodigoCliente());
+            cpCuentasAhorros = cpCuentasAhorrosInterfaceLocal.findById(cpMaestroCuentas.getNumeroCuenta());
+            if (cpCuentasAhorros == null) {
+                return "999";
+            }
+
+            BeanGEAuditoria beanGEAuditoriaGrabar = new BeanGEAuditoria(new Date(System.currentTimeMillis()), usuario, terminal, ip, new Date(System.currentTimeMillis()), usuario, terminal, ip);
+            BeanGEAuditoria beanGEAuditoriaActualizar = new BeanGEAuditoria(new Date(System.currentTimeMillis()), usuario, terminal, ip);
+            //
+            // Obtener monto de operacion en moneda de la cuenta
+            //
+            //isCompraVenta = !codigoMonedaOperacion
             // .equals(cpMaestroCuentas.getCodigoMoneda());
-         montoOperacion = new BigDecimal(monto.toString());
-         //
-         // Obtener los datos anteriores para la generacion del movimiento historico
-         //          
-         ahFechaUltimoMovimiento = cpMaestroCuentas.getFechaUltimoMovimiento();
-         ahMontoSaldoDisponibleAntesMovimiento = cpMaestroCuentas
-               .getMontoSaldoDisponible();
-         ahMontoSaldoContableAntesMovimiento = cpMaestroCuentas.getMontoSaldoContable();
-         ahMontoSaldoCapitalAntesMovimiento = cpMaestroCuentas.getMontoSaldoCapital();
-         ahMontoSaldoInteresAntesMovimiento = cpMaestroCuentas.getMontoSaldoInteres();
-         ahMontoTotalChequesAntesMovimiento = cpMaestroCuentas.getMontoTotalCheques();
-         ahMontoTotalDisponibleRetirarAntesMovimiento = cpMaestroCuentas
-               .getMontoTotalDisponibleRetirar();
-         ahMontoTotalDepositadoAntesMovimiento = cpMaestroCuentas
-               .getMontoTotalDepositadoCuenta();
-         estadoCuentaGuardado = cpMaestroCuentas.getCpEstadoCuenta()
-               .getCodigoEstadoCuenta();
+            montoOperacion = new BigDecimal(monto.toString());
+            //
+            // Obtener los datos anteriores para la generacion del movimiento historico
+            //          
+            ahFechaUltimoMovimiento = cpMaestroCuentas.getFechaUltimoMovimiento();
+            ahMontoSaldoDisponibleAntesMovimiento = cpMaestroCuentas.getMontoSaldoDisponible();
+            ahMontoSaldoContableAntesMovimiento = cpMaestroCuentas.getMontoSaldoContable();
+            ahMontoSaldoCapitalAntesMovimiento = cpMaestroCuentas.getMontoSaldoCapital();
+            ahMontoSaldoInteresAntesMovimiento = cpMaestroCuentas.getMontoSaldoInteres();
+            ahMontoTotalChequesAntesMovimiento = cpMaestroCuentas.getMontoTotalCheques();
+            ahMontoTotalDisponibleRetirarAntesMovimiento = cpMaestroCuentas.getMontoTotalDisponibleRetirar();
+            ahMontoTotalDepositadoAntesMovimiento = cpMaestroCuentas.getMontoTotalDepositadoCuenta();
+            estadoCuentaGuardado = cpMaestroCuentas.getCpEstadoCuenta().getCodigoEstadoCuenta();
 
-         //Actualiza saldos en maestro de cuentas CECuentasEfectivo        
-         cpMaestroCuentas.setFechaModificacion(new Date(System.currentTimeMillis()));
-         cpMaestroCuentas.setUsuarioModificacion(usuario);
-         cpMaestroCuentas.setTerminalModificacion(terminal);
-         cpMaestroCuentas.setIpModificacion(ip);
-         cpMaestroCuentasInterfaceLocal.update(cpMaestroCuentas,beanGEAuditoriaActualizar);
-         //
-         //Actualiza el estado en el maestro de cuentas para las cuentas que se aperturaron con estado A (aquellas aperturas 
-         //con deposito pendiente de aplicacion de transaccion), entonces cuando hay el rimer deposito debe cambiar a V vigente
-         //          
-         if ("A".equals(cpMaestroCuentas.getCpEstadoCuenta().getCodigoEstadoCuenta())) {
-            cpMaestroCuentas.getCpEstadoCuenta().setCodigoEstadoCuenta("V");
-            cpMaestroCuentasInterfaceLocal.update(cpMaestroCuentas,beanGEAuditoriaActualizar);
-         }
-
-         ahCorrelativoMovimiento = cpMaestroCuentas.getCorrelativoMovimiento().intValue() + 1;
-         ahMontoTotalCheques = new BigDecimal(cpMaestroCuentas.getMontoTotalCheques()
-               .toString());
-         ahMontoSaldoContable = new BigDecimal(cpMaestroCuentas.getMontoSaldoContable()
-               .toString());
-         ahMontoSaldoCapital = new BigDecimal(cpMaestroCuentas.getMontoSaldoCapital()
-               .toString());
-         ahMontoSaldoDisponible = new BigDecimal(cpMaestroCuentas
-               .getMontoSaldoDisponible().toString());
-         ahMontoTotalDisponibleRetirar = new BigDecimal(cpMaestroCuentas
-               .getMontoTotalDisponibleRetirar().toString());
-         ahMontoTotalDepositado = new BigDecimal(cpMaestroCuentas
-               .getMontoTotalDepositadoCuenta().toString());
-
-         if ("RC".equals(tipoPago)) {
-
-            ahMontoTotalCheques = ahMontoTotalCheques.add(montoOperacion);
-            ahMontoSaldoContable = ahMontoSaldoContable.add(montoOperacion);
-            ahMontoSaldoCapital = ahMontoSaldoCapital.add(new BigDecimal(
-                  montoEfectivizar.toString()));
-            ahMontoSaldoDisponible = ahMontoSaldoDisponible
-                  .add(new BigDecimal(montoEfectivizar.toString()));
-            ahMontoTotalDisponibleRetirar = ahMontoTotalDisponibleRetirar
-                  .add(new BigDecimal(montoEfectivizar.toString()));
-            ahMontoTotalDepositado = ahMontoTotalDepositado
-                  .add(new BigDecimal(montoEfectivizar.toString()));
-         } else {
-
-            ahMontoSaldoContable = ahMontoSaldoContable.add(montoOperacion);
-            ahMontoSaldoCapital = ahMontoSaldoCapital.add(montoOperacion);
-            ahMontoSaldoDisponible = ahMontoSaldoDisponible.add(montoOperacion);
-            //Inicio [CC16-053] acnunez 10.10.2016
-            if (_isEmpty(cpMaestroCuentas.getMontoRetenidoPorTransacciones())){
-                cpMaestroCuentas.setMontoRetenidoPorTransacciones(0.0);
+            //Actualiza saldos en maestro de cuentas CECuentasEfectivo        
+            cpMaestroCuentas.setFechaModificacion(new Date(System.currentTimeMillis()));
+            cpMaestroCuentas.setUsuarioModificacion(usuario);
+            cpMaestroCuentas.setTerminalModificacion(terminal);
+            cpMaestroCuentas.setIpModificacion(ip);
+            cpMaestroCuentasInterfaceLocal.update(cpMaestroCuentas, beanGEAuditoriaActualizar);
+            //
+            //Actualiza el estado en el maestro de cuentas para las cuentas que se aperturaron con estado A (aquellas aperturas 
+            //con deposito pendiente de aplicacion de transaccion), entonces cuando hay el rimer deposito debe cambiar a V vigente
+            //          
+            if ("A".equals(cpMaestroCuentas.getCpEstadoCuenta().getCodigoEstadoCuenta())) {
+                cpMaestroCuentas.getCpEstadoCuenta().setCodigoEstadoCuenta("V");
+                cpMaestroCuentasInterfaceLocal.update(cpMaestroCuentas, beanGEAuditoriaActualizar);
             }
-            ahMontoTotalDisponibleRetirar = ahMontoSaldoDisponible
-                  .subtract(new BigDecimal(cpMaestroCuentas.getMontoTotalBloqueado()+cpMaestroCuentas.getMontoRetenidoPorTransacciones()));
-            //Fin [CC16-053]
-            ahMontoTotalDepositado = ahMontoTotalDepositado.add(montoOperacion);
-         }
-         //gfernandez 19.10.2013
-         BigDecimal montoEnvioContabilidad = new BigDecimal("0");
-         if (cpMaestroCuentas.getCpClaseCuenta().getCodigoClaseCuenta().equals("AHO")) {
-            BigDecimal totalImpuestos = BigDecimal.valueOf(0); 
-            if (lstImpuestos != null && lstImpuestos.size() > 0) {
-               for (int k = 0; k < lstImpuestos.size(); k++) {
-                  BeanREImpuestoEmisionGiro beanImpuesto = (BeanREImpuestoEmisionGiro) lstImpuestos.get(k);
-                  totalImpuestos = totalImpuestos.add(BigDecimal.valueOf(beanImpuesto.getImporte()));
-               }
-            }
-            ahMontoSaldoCapital = ahMontoSaldoCapital.subtract(totalImpuestos);
-            ahMontoSaldoContable = ahMontoSaldoContable.subtract(totalImpuestos);
-            ahMontoSaldoDisponible = ahMontoSaldoDisponible.subtract(totalImpuestos);
-            //ahMontoTotalDepositado = ahMontoTotalDepositado.subtract(totalImpuestos);
-            ahMontoTotalDisponibleRetirar = ahMontoTotalDisponibleRetirar.subtract(totalImpuestos);
-         //gfernandez 19.10.2013
-         List lstOPTransaccionesAplicar = new ArrayList();
-         //[Req. 14-115] fvalle 05.09.2014
-         if(!Constante.OPE_FINANCIERA_ABONO_CUENTA_HIPOTECARIOS.equals(conceptoOperacionFinanciera)){
-         lstOPTransaccionesAplicar = (List) opTransaccionesAplicarInterfaceLocal.findDembolsoCuentaByCuenta(numeroCuenta, "DC", "AC", "G");
-            if(lstOPTransaccionesAplicar.size()==0){
-               montoEnvioContabilidad = new BigDecimal(monto.toString()).subtract(totalImpuestos);
-               monto = new Double(montoEnvioContabilidad.toString());
-            }
-         }
-         }
 
-         cpMaestroCuentas.setFechaUltimoMovimiento(fechaOperacion);
-         cpMaestroCuentas.setCorrelativoMovimiento(new Long(ahCorrelativoMovimiento));
-         cpMaestroCuentas.setMontoTotalCheques(new Double(ahMontoTotalCheques
-               .doubleValue()));
-         cpMaestroCuentas.setMontoSaldoCapital(new Double(ahMontoSaldoCapital
-               .doubleValue()));
-         cpMaestroCuentas.setMontoSaldoDisponible(new Double(ahMontoSaldoDisponible
-               .doubleValue()));
-         cpMaestroCuentas.setMontoSaldoContable(new Double(ahMontoSaldoContable
-               .doubleValue()));
-         cpMaestroCuentas.setMontoTotalDisponibleRetirar(new Double(
-               ahMontoTotalDisponibleRetirar.doubleValue()));
-         cpMaestroCuentas.setMontoTotalDepositadoCuenta(new Double(ahMontoTotalDepositado
-               .doubleValue()));
-         
-         cpMaestroCuentasInterfaceLocal.update(cpMaestroCuentas,beanGEAuditoriaActualizar);
-         //
-         //Realiza bloqueo, en caso que la cuenta tenga bloqueos vigentes:
-         cpCuentasPasivasFacadeLocal.bloquearSaldo(cpMaestroCuentas, new Double(montoOperacion.doubleValue()), "C",
-               usuario, terminal, ip);
-         //
+            ahCorrelativoMovimiento = cpMaestroCuentas.getCorrelativoMovimiento().intValue() + 1;
+            ahMontoTotalCheques = new BigDecimal(cpMaestroCuentas.getMontoTotalCheques().toString());
+            ahMontoSaldoContable = new BigDecimal(cpMaestroCuentas.getMontoSaldoContable().toString());
+            ahMontoSaldoCapital = new BigDecimal(cpMaestroCuentas.getMontoSaldoCapital().toString());
+            ahMontoSaldoDisponible = new BigDecimal(cpMaestroCuentas.getMontoSaldoDisponible().toString());
+            ahMontoTotalDisponibleRetirar = new BigDecimal(cpMaestroCuentas.getMontoTotalDisponibleRetirar().toString());
+            ahMontoTotalDepositado = new BigDecimal(cpMaestroCuentas.getMontoTotalDepositadoCuenta().toString());
 
-         //
-         //Crea Transaccion en operaciones por el retiro de fondos en la cuenta y por la compre o venta de moneda de ser esto necesario, donde
-         //
-         Long numeroTransaccionCompraVenta = null;
-         //
+            if ("RC".equals(tipoPago)) {
+
+                ahMontoTotalCheques = ahMontoTotalCheques.add(montoOperacion);
+                ahMontoSaldoContable = ahMontoSaldoContable.add(montoOperacion);
+                ahMontoSaldoCapital = ahMontoSaldoCapital.add(new BigDecimal(montoEfectivizar.toString()));
+                ahMontoSaldoDisponible = ahMontoSaldoDisponible.add(new BigDecimal(montoEfectivizar.toString()));
+                ahMontoTotalDisponibleRetirar = ahMontoTotalDisponibleRetirar.add(new BigDecimal(montoEfectivizar.toString()));
+                ahMontoTotalDepositado = ahMontoTotalDepositado.add(new BigDecimal(montoEfectivizar.toString()));
+            } else {
+
+                ahMontoSaldoContable = ahMontoSaldoContable.add(montoOperacion);
+                ahMontoSaldoCapital = ahMontoSaldoCapital.add(montoOperacion);
+                ahMontoSaldoDisponible = ahMontoSaldoDisponible.add(montoOperacion);
+                //Inicio [CC16-053] acnunez 10.10.2016
+                if (_isEmpty(cpMaestroCuentas.getMontoRetenidoPorTransacciones())) {
+                    cpMaestroCuentas.setMontoRetenidoPorTransacciones(0.0);
+                }
+                ahMontoTotalDisponibleRetirar = ahMontoSaldoDisponible.subtract(new BigDecimal(cpMaestroCuentas.getMontoTotalBloqueado() + cpMaestroCuentas.getMontoRetenidoPorTransacciones()));
+                //Fin [CC16-053]
+                ahMontoTotalDepositado = ahMontoTotalDepositado.add(montoOperacion);
+            }
+            //gfernandez 19.10.2013
+            BigDecimal montoEnvioContabilidad = new BigDecimal("0");
+            BigDecimal totalImpuestos = BigDecimal.valueOf(0);
+            if (cpMaestroCuentas.getCpClaseCuenta().getCodigoClaseCuenta().equals("AHO")) {
+                if (lstImpuestos != null && lstImpuestos.size() > 0) {
+                    for (int k = 0; k < lstImpuestos.size(); k++) {
+                        BeanREImpuestoEmisionGiro beanImpuesto = (BeanREImpuestoEmisionGiro) lstImpuestos.get(k);
+                        totalImpuestos = totalImpuestos.add(BigDecimal.valueOf(beanImpuesto.getImporte()));
+                    }
+                }
+                ahMontoSaldoCapital = ahMontoSaldoCapital.subtract(totalImpuestos);
+                ahMontoSaldoContable = ahMontoSaldoContable.subtract(totalImpuestos);
+                ahMontoSaldoDisponible = ahMontoSaldoDisponible.subtract(totalImpuestos);
+                //ahMontoTotalDepositado = ahMontoTotalDepositado.subtract(totalImpuestos);
+                ahMontoTotalDisponibleRetirar = ahMontoTotalDisponibleRetirar.subtract(totalImpuestos);
+                //gfernandez 19.10.2013
+                List lstOPTransaccionesAplicar = new ArrayList();
+                //[Req. 14-115] fvalle 05.09.2014
+                if (!Constante.OPE_FINANCIERA_ABONO_CUENTA_HIPOTECARIOS.equals(conceptoOperacionFinanciera)) {
+                    lstOPTransaccionesAplicar = (List) opTransaccionesAplicarInterfaceLocal.findDembolsoCuentaByCuenta(numeroCuenta,
+                                                                                                                       "DC",
+                                                                                                                       "AC",
+                                                                                                                       "G");
+                    if (lstOPTransaccionesAplicar.size() == 0) {
+                        montoEnvioContabilidad = new BigDecimal(monto.toString()).subtract(totalImpuestos);
+                        monto = new Double(montoEnvioContabilidad.toString());
+                    }
+                }
+            }
+
+            cpMaestroCuentas.setFechaUltimoMovimiento(fechaOperacion);
+            cpMaestroCuentas.setCorrelativoMovimiento(new Long(ahCorrelativoMovimiento));
+            cpMaestroCuentas.setMontoTotalCheques(new Double(ahMontoTotalCheques.doubleValue()));
+            cpMaestroCuentas.setMontoSaldoCapital(new Double(ahMontoSaldoCapital.doubleValue()));
+            cpMaestroCuentas.setMontoSaldoDisponible(new Double(ahMontoSaldoDisponible.doubleValue()));
+            cpMaestroCuentas.setMontoSaldoContable(new Double(ahMontoSaldoContable.doubleValue()));
+            cpMaestroCuentas.setMontoTotalDisponibleRetirar(new Double(ahMontoTotalDisponibleRetirar.doubleValue()));
+            cpMaestroCuentas.setMontoTotalDepositadoCuenta(new Double(ahMontoTotalDepositado.doubleValue()));
+
+            cpMaestroCuentasInterfaceLocal.update(cpMaestroCuentas, beanGEAuditoriaActualizar);
+            //
+            //Realiza bloqueo, en caso que la cuenta tenga bloqueos vigentes:
+            cpCuentasPasivasFacadeLocal.bloquearSaldo(cpMaestroCuentas,
+                                                      new Double(montoOperacion.doubleValue()),
+                                                      "C",
+                                                      usuario,
+                                                      terminal,
+                                                      ip);
+            //
+
+            //
+            //Crea Transaccion en operaciones por el retiro de fondos en la cuenta y por la compre o venta de moneda de ser esto necesario, donde
+            //
+            Long numeroTransaccionCompraVenta = null;
+            //
             Map mapTransaccion = cpCuentasPasivasFacadeLocal.tranPorOperacionCuenta(codigoEmpresa, //codigoEmpresa
                                                                                     codigoAgencia, //codigoAgencia
                                                                                     codigoConceptoOperacion, //codigoConceptoOperacion
                                                                                     codigoSubConceptoOperacion, //codigoSubConceptoOperacion
                                                                                     cpMaestroCuentas.getCodigoMoneda(), //monedaCuenta
                                                                                     codigoMonedaOperacion, //monedaDestino
-                                                                                    monto, //montoOperacion
+                                                                                    montoOperacion.doubleValue(), //[Req.17-033] acnunez 15.06.2017
                                                                                     montoMonedaOperacion, //montoOperacionDestino
                                                                                     valorTipoCambio, //valorTipoCambio
                                                                                     usuario, //codigoUsuario
@@ -1366,14 +1335,14 @@
                                                                                     numeroGrupoTransaccion, //numeroGrupoTransaccion
                                                                                     indicadorOperacionPrincipal, //indicadorOperacionPrincipal
                                                                                     numeroReferencia, //referencia5
-                                                                                    numeroLargoCuentaBancaria,//cuentabancaria
+                                                                                    numeroLargoCuentaBancaria, //cuentabancaria
                                                                                     codigoEntidadManejadora,
-                                                                                    "009",//canalOperacion,
-                                                                                    null,//codigoCanal,
-                                                                                    null,//descripcionCanal,
-                                                                                    conceptoOperacionFinanciera,//conceptoOperacionFinanciera,
-                                                                                    null,//lstsubconceptos
-                                                                                    usuario,// Inicio [Req.S17-023] kdelacruz 18.05.2017
+                                                                                    "009", //canalOperacion,
+                                                                                    null, //codigoCanal,
+                                                                                    null, //descripcionCanal,
+                                                                                    conceptoOperacionFinanciera, //conceptoOperacionFinanciera,
+                                                                                    null, //lstsubconceptos
+                                                                                    usuario, // Inicio [Req.S17-023] kdelacruz 18.05.2017
                                                                                     terminal,
                                                                                     ip,
                                                                                     //mnieves 09.05.2011
@@ -1383,180 +1352,140 @@
                                                                                     null,
                                                                                     null,
                                                                                     genericBean);// Fin [Req.S17-023]
-         errorCode =mapTransaccion.get("strError").toString();
-         if (!NO_ERROR.equals(errorCode)) {
-            sessionContext.setRollbackOnly();
-            cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
-                  numeroCuenta,
-                  "CECuentaEfectivoFacade.depositoAhorro()", errorCode,
-                  "");
-            return errorCode;
-         }else{
-            if(tipoPago != "AC"){
-               String error = opBNTransaccionesFacadeInterfaceLocal.actualizaSaldo(
-                     codigoEntidadManejadora,
-                        codigoEmpresa,
-                        codigoAgencia, 
-                        fechaOperacion, 
-                        "I", 
-                        montoTotal, 
-                        codigoMoneda, 
-                        tipoPago, 
-                        usuario, "N");
+            errorCode = mapTransaccion.get("strError").toString();
+            if (!NO_ERROR.equals(errorCode)) {
+                sessionContext.setRollbackOnly();
+                cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
+                                                                     numeroCuenta,
+                                                                     "CECuentaEfectivoFacade.depositoAhorro()",
+                                                                     errorCode,
+                                                                     "");
+                return errorCode;
+            } else {
+                if (tipoPago != "AC") {
+                    String error = opBNTransaccionesFacadeInterfaceLocal.actualizaSaldo(codigoEntidadManejadora,
+                                                                                        codigoEmpresa,
+                                                                                        codigoAgencia,
+                                                                                        fechaOperacion,
+                                                                                        "I",
+                                                                                        montoTotal,
+                                                                                        codigoMoneda,
+                                                                                        tipoPago,
+                                                                                        usuario,
+                                                                                        "N");
+                }
             }
-         }
-         
-         //
-         // crea movimiento en cuenta de ahorros
-         //
-         Calendar calendar = Calendar.getInstance();
-         calendar.setTime(fechaOperacion);
-         int mesMovimiento = calendar.get(Calendar.MONTH) + 1;
-         int anioMovimiento = calendar.get(Calendar.YEAR);
-         CPMovimientoCuentaAhorro cpMovimientoCuentaAhorro = new CPMovimientoCuentaAhorro();
-         cpMovimientoCuentaAhorro.setId(new CPMovimientoCuentaAhorroId(
-               numeroCuenta, new Long(ahCorrelativoMovimiento)));
-         //
-         CPCuentasAhorros cpCuentasAhorro = new CPCuentasAhorros();
-         cpCuentasAhorro.setNumeroCuenta(numeroCuenta);
-         cpMovimientoCuentaAhorro.setCpCuentasAhorros(cpCuentasAhorro);
-         cpMovimientoCuentaAhorro.setEstadoMovimiento("V");
-         cpMovimientoCuentaAhorro
-               .setCodigoOperacion(codigoConceptoOperacion);
-         cpMovimientoCuentaAhorro.setCodigoMoneda(cpMaestroCuentas.getCodigoMoneda());
-         cpMovimientoCuentaAhorro.setMontoMovimiento(new Double(
-               montoOperacion.doubleValue()));
-         cpMovimientoCuentaAhorro.setMontoCapitalRetirado(new Double(0));
-         cpMovimientoCuentaAhorro.setMontoInteresRetirado(new Double(0));
-         cpMovimientoCuentaAhorro.setMontoSaldoDisponibleFinal(cpMaestroCuentas
-               .getMontoSaldoDisponible());
-         cpMovimientoCuentaAhorro.setMontoSaldoContableFinal(cpMaestroCuentas
-               .getMontoSaldoContable());
-         cpMovimientoCuentaAhorro
-               .setMontoSaldoDisponibleAntesMovimiento(ahMontoSaldoDisponibleAntesMovimiento);
-         cpMovimientoCuentaAhorro
-               .setMontoSaldoContableAntesMovimiento(ahMontoSaldoContableAntesMovimiento);
-         cpMovimientoCuentaAhorro.setTasaInteres(cpMaestroCuentas.getValorTasaInteres());
-         cpMovimientoCuentaAhorro.setFechaMovimiento(fechaOperacion);
-         cpMovimientoCuentaAhorro.setHoraMovimiento(horaOperacion);
-         cpMovimientoCuentaAhorro.setCodigoUsuarioMovimiento(usuario);
-         cpMovimientoCuentaAhorro.setCodigoTipoDeposito(tipoPago);
-         cpMovimientoCuentaAhorro
-               .setNumeroReferenciaTipoDeposito(numeroReferencia);
-         cpMovimientoCuentaAhorro.setCodigoEmpresa(codigoEmpresa);
-         cpMovimientoCuentaAhorro.setCodigoAgencia(codigoAgencia);
-         cpMovimientoCuentaAhorro
-               .setFechaUltimoMovimiento(ahFechaUltimoMovimiento);
-         cpMovimientoCuentaAhorro.setMontoSaldoCapitalFinal(cpMaestroCuentas
-               .getMontoSaldoCapital());
-         cpMovimientoCuentaAhorro.setMontoSaldoInteresFinal(cpMaestroCuentas
-               .getMontoSaldoInteres());
-         cpMovimientoCuentaAhorro
-               .setMontoSaldoCapitalAntesMovimiento(ahMontoSaldoCapitalAntesMovimiento);
-         cpMovimientoCuentaAhorro
-               .setMontoSaldoInteresAntesMovimiento(ahMontoSaldoInteresAntesMovimiento);
-         cpMovimientoCuentaAhorro
-               .setMontoSaldoCapitalRetiradoAntesMovimiento(cpCuentasAhorros
-                     .getMontoTotalCapitalRetirad());
-         cpMovimientoCuentaAhorro
-               .setMontoSaldoInteresRetiradoAntesMovimiento(cpCuentasAhorros
-                     .getMontoTotalInteresRetirado());
-         cpMovimientoCuentaAhorro
-               .setNumeroCorrelativoMovimientoCompraVenta(numeroTransaccionCompraVenta);//numeroTransaccionCompraVenta);
-         cpMovimientoCuentaAhorro.setNumeroCorrelativoComprobanteCaja(null);
-         cpMovimientoCuentaAhorro
-               .setNumeroCorrelativoTransaccion(numeroTransac);//check it out numeroTransaccion
-         cpMovimientoCuentaAhorro
-               .setNumeroCorrelativoOrdenPago(numeroOrdenPago);
-         cpMovimientoCuentaAhorro
-               .setMontoTotalChequesAntesMovimiento(ahMontoTotalChequesAntesMovimiento);
-         cpMovimientoCuentaAhorro
-               .setMontoTotalCapitalBloqueadoAntesMovimiento(cpMaestroCuentas
-                     .getMontoTotalCapitalBloqueado());
-         cpMovimientoCuentaAhorro
-               .setMontoTotalInteresBloqueadoAntesMovimiento(cpMaestroCuentas
-                     .getMontoTotalInteresBloqueado());
-         cpMovimientoCuentaAhorro.setMontoTotalBloqueadoAntesMovimiento(cpMaestroCuentas
-               .getMontoTotalBloqueado());
-         cpMovimientoCuentaAhorro
-               .setMontoInteresTotalAcumuladoACapitalizarAntesMovimiento(cpMaestroCuentas
-                     .getMontoInteresTotalAcumuladoACapitalizar());
-         cpMovimientoCuentaAhorro.setMontoCapitalizadoAntesMovimiento(cpMaestroCuentas
-               .getMontoCapitalizado());
-         cpMovimientoCuentaAhorro
-               .setMontoTotalDisponibleRetirarAntesMovimiento(ahMontoTotalDisponibleRetirarAntesMovimiento);
-         cpMovimientoCuentaAhorro
-               .setMontoTotalRetiradoCuentaAntesMovimiento(cpMaestroCuentas
-                     .getMontoTotalRetiradoCuenta());
-         cpMovimientoCuentaAhorro
-               .setMontoTotalDepositadoCuentaAntesMovimiento(ahMontoTotalDepositadoAntesMovimiento);
-         cpMovimientoCuentaAhorro.setCodigoEstadoCuentaAntesMovimiento(cpMaestroCuentas
-               .getCpEstadoCuenta().getCodigoEstadoCuenta());
-         cpMovimientoCuentaAhorro
-               .setCodigoUsuarioAsignoEstadoAntesMovimiento(cpMaestroCuentas
-                     .getCodigoUsuarioAsignoEstado());
-         cpMovimientoCuentaAhorro
-               .setObservacionAsignacionEstadoCuentaAntesMovimiento(cpMaestroCuentas
-                     .getObservacionAsignacionEstadoCuenta());
-         cpMovimientoCuentaAhorro
-               .setFechaAsignacionEstadoAntesMovimiento(cpMaestroCuentas
-                     .getFechaAsignacionEstado());
-         cpMovimientoCuentaAhorro.setFechaAnulacion(null);
-         cpMovimientoCuentaAhorro.setHoraAnulacion(null);
-         cpMovimientoCuentaAhorro.setCodigoUsuarioAnulacion(null);
-         cpMovimientoCuentaAhorro.setMesMovimiento(new Long(mesMovimiento));
-         cpMovimientoCuentaAhorro
-               .setAnioMovimiento(new Long(anioMovimiento));
-         cpMovimientoCuentaAhorro.setAgenciaOrigen(cpMaestroCuentas.getCodigoAgencia());
-         cpMovimientoCuentaAhorro.setFechaInsercion(new Date(System
-               .currentTimeMillis()));
-         cpMovimientoCuentaAhorro.setUsuarioInsercion(usuario);
-         cpMovimientoCuentaAhorro.setTerminalInsercion(terminal);
-         cpMovimientoCuentaAhorro.setIpInsercion(ip);
-         //dfujimoto 09.10.2013
-         cpMovimientoCuentaAhorro.setNumeroCredito(credito);
-         cpMovimientoCuentaAhorro.setNombreDepositante(depositante);
-         cpMovimientoCuentaAhorro.setDocumentoDepositante(nroDocumento);
-         //dfujimoto 19.12.2013
-         cpMovimientoCuentaAhorro.setFechaValor(fechaValor);
-         if(fechaValor!= null && !fechaValor.equals("")){
-            cpMovimientoCuentaAhorro.setEstadoBoletaDeposito(Constante.ESTADO_PENDIENTE_BOLETA_DEPOSITO);
-         }
-         
-         cpMovimientoCuentaAhorroInterfaceLocal
-               .save(cpMovimientoCuentaAhorro,beanGEAuditoriaGrabar);
-         if (!NO_ERROR.equals(errorCode)) {
-            sessionContext.setRollbackOnly();
-            cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
-                  numeroCuenta,
-                  "CECuentaEfectivoFacade.depositoAhorro()", errorCode,
-                  "");
-            return errorCode;// Error en generador de transacciones
-         }
-      } catch (Exception e) {
-         String msgError = e.getClass().getName() + " " + e.getMessage();
-         msgError = msgError.length() > 2000 ? msgError.substring(0, 2000)
-               : msgError;
-         if (clPersonas == null) {
-            errorCode = "135";
-            cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
-                  numeroCuenta,
-                  "CECuentaEfectivoFacade.depositoAhorro()", errorCode,
-                  msgError);
-         } else
-            cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
-                  "CECuentaEfectivoFacade.deposito()", msgError);
 
-         if ("000".equals(errorCode))
-            errorCode = e.getMessage();
-         if (errorCode != null) {
-            sessionContext.setRollbackOnly();
-            return errorCode;
-         } else
-            throw e;
-      }
-      return NO_ERROR;
-   }
+            //
+            // crea movimiento en cuenta de ahorros
+            //
+            Calendar calendar = Calendar.getInstance();
+            calendar.setTime(fechaOperacion);
+            int mesMovimiento = calendar.get(Calendar.MONTH) + 1;
+            int anioMovimiento = calendar.get(Calendar.YEAR);
+            CPMovimientoCuentaAhorro cpMovimientoCuentaAhorro = new CPMovimientoCuentaAhorro();
+            cpMovimientoCuentaAhorro.setId(new CPMovimientoCuentaAhorroId(numeroCuenta, new Long(ahCorrelativoMovimiento)));
+            //
+            CPCuentasAhorros cpCuentasAhorro = new CPCuentasAhorros();
+            cpCuentasAhorro.setNumeroCuenta(numeroCuenta);
+            cpMovimientoCuentaAhorro.setCpCuentasAhorros(cpCuentasAhorro);
+            cpMovimientoCuentaAhorro.setEstadoMovimiento("V");
+            cpMovimientoCuentaAhorro.setCodigoOperacion(codigoConceptoOperacion);
+            cpMovimientoCuentaAhorro.setCodigoMoneda(cpMaestroCuentas.getCodigoMoneda());
+            cpMovimientoCuentaAhorro.setMontoMovimiento(new Double(montoOperacion.doubleValue()));
+            cpMovimientoCuentaAhorro.setMontoCapitalRetirado(new Double(0));
+            cpMovimientoCuentaAhorro.setMontoInteresRetirado(new Double(0));
+            cpMovimientoCuentaAhorro.setMontoSaldoDisponibleFinal(cpMaestroCuentas.getMontoSaldoDisponible());//[Req.17-033] acnunez 15.06.2017
+            cpMovimientoCuentaAhorro.setMontoSaldoContableFinal(cpMaestroCuentas.getMontoSaldoContable());//[Req.17-033] acnunez 15.06.2017
+            cpMovimientoCuentaAhorro.setMontoSaldoDisponibleAntesMovimiento(ahMontoSaldoDisponibleAntesMovimiento);
+            cpMovimientoCuentaAhorro.setMontoSaldoContableAntesMovimiento(ahMontoSaldoContableAntesMovimiento);
+            cpMovimientoCuentaAhorro.setTasaInteres(cpMaestroCuentas.getValorTasaInteres());
+            cpMovimientoCuentaAhorro.setFechaMovimiento(fechaOperacion);
+            cpMovimientoCuentaAhorro.setHoraMovimiento(horaOperacion);
+            cpMovimientoCuentaAhorro.setCodigoUsuarioMovimiento(usuario);
+            cpMovimientoCuentaAhorro.setCodigoTipoDeposito(tipoPago);
+            cpMovimientoCuentaAhorro.setNumeroReferenciaTipoDeposito(numeroReferencia);
+            cpMovimientoCuentaAhorro.setCodigoEmpresa(codigoEmpresa);
+            cpMovimientoCuentaAhorro.setCodigoAgencia(codigoAgencia);
+            cpMovimientoCuentaAhorro.setFechaUltimoMovimiento(ahFechaUltimoMovimiento);
+            cpMovimientoCuentaAhorro.setMontoSaldoCapitalFinal(cpMaestroCuentas.getMontoSaldoCapital());//[Req.17-033] acnunez 15.06.2017
+            cpMovimientoCuentaAhorro.setMontoSaldoInteresFinal(cpMaestroCuentas.getMontoSaldoInteres());
+            cpMovimientoCuentaAhorro.setMontoSaldoCapitalAntesMovimiento(ahMontoSaldoCapitalAntesMovimiento);
+            cpMovimientoCuentaAhorro.setMontoSaldoInteresAntesMovimiento(ahMontoSaldoInteresAntesMovimiento);
+            cpMovimientoCuentaAhorro.setMontoSaldoCapitalRetiradoAntesMovimiento(cpCuentasAhorros.getMontoTotalCapitalRetirad());
+            cpMovimientoCuentaAhorro.setMontoSaldoInteresRetiradoAntesMovimiento(cpCuentasAhorros.getMontoTotalInteresRetirado());
+            cpMovimientoCuentaAhorro.setNumeroCorrelativoMovimientoCompraVenta(numeroTransaccionCompraVenta);//numeroTransaccionCompraVenta);
+            cpMovimientoCuentaAhorro.setNumeroCorrelativoComprobanteCaja(null);
+            cpMovimientoCuentaAhorro.setNumeroCorrelativoTransaccion(numeroTransac);//check it out numeroTransaccion
+            cpMovimientoCuentaAhorro.setNumeroCorrelativoOrdenPago(numeroOrdenPago);
+            cpMovimientoCuentaAhorro.setMontoTotalChequesAntesMovimiento(ahMontoTotalChequesAntesMovimiento);
+            cpMovimientoCuentaAhorro.setMontoTotalCapitalBloqueadoAntesMovimiento(cpMaestroCuentas.getMontoTotalCapitalBloqueado());
+            cpMovimientoCuentaAhorro.setMontoTotalInteresBloqueadoAntesMovimiento(cpMaestroCuentas.getMontoTotalInteresBloqueado());
+            cpMovimientoCuentaAhorro.setMontoTotalBloqueadoAntesMovimiento(cpMaestroCuentas.getMontoTotalBloqueado());
+            cpMovimientoCuentaAhorro.setMontoInteresTotalAcumuladoACapitalizarAntesMovimiento(cpMaestroCuentas.getMontoInteresTotalAcumuladoACapitalizar());
+            cpMovimientoCuentaAhorro.setMontoCapitalizadoAntesMovimiento(cpMaestroCuentas.getMontoCapitalizado());
+            cpMovimientoCuentaAhorro.setMontoTotalDisponibleRetirarAntesMovimiento(ahMontoTotalDisponibleRetirarAntesMovimiento);
+            cpMovimientoCuentaAhorro.setMontoTotalRetiradoCuentaAntesMovimiento(cpMaestroCuentas.getMontoTotalRetiradoCuenta());
+            cpMovimientoCuentaAhorro.setMontoTotalDepositadoCuentaAntesMovimiento(ahMontoTotalDepositadoAntesMovimiento);
+            cpMovimientoCuentaAhorro.setCodigoEstadoCuentaAntesMovimiento(cpMaestroCuentas.getCpEstadoCuenta().getCodigoEstadoCuenta());
+            cpMovimientoCuentaAhorro.setCodigoUsuarioAsignoEstadoAntesMovimiento(cpMaestroCuentas.getCodigoUsuarioAsignoEstado());
+            cpMovimientoCuentaAhorro.setObservacionAsignacionEstadoCuentaAntesMovimiento(cpMaestroCuentas.getObservacionAsignacionEstadoCuenta());
+            cpMovimientoCuentaAhorro.setFechaAsignacionEstadoAntesMovimiento(cpMaestroCuentas.getFechaAsignacionEstado());
+            cpMovimientoCuentaAhorro.setFechaAnulacion(null);
+            cpMovimientoCuentaAhorro.setHoraAnulacion(null);
+            cpMovimientoCuentaAhorro.setCodigoUsuarioAnulacion(null);
+            cpMovimientoCuentaAhorro.setMesMovimiento(new Long(mesMovimiento));
+            cpMovimientoCuentaAhorro.setAnioMovimiento(new Long(anioMovimiento));
+            cpMovimientoCuentaAhorro.setAgenciaOrigen(cpMaestroCuentas.getCodigoAgencia());
+            cpMovimientoCuentaAhorro.setFechaInsercion(new Date(System.currentTimeMillis()));
+            cpMovimientoCuentaAhorro.setUsuarioInsercion(usuario);
+            cpMovimientoCuentaAhorro.setTerminalInsercion(terminal);
+            cpMovimientoCuentaAhorro.setIpInsercion(ip);
+            //dfujimoto 09.10.2013
+            cpMovimientoCuentaAhorro.setNumeroCredito(credito);
+            cpMovimientoCuentaAhorro.setNombreDepositante(depositante);
+            cpMovimientoCuentaAhorro.setDocumentoDepositante(nroDocumento);
+            //dfujimoto 19.12.2013
+            cpMovimientoCuentaAhorro.setFechaValor(fechaValor);
+            if (fechaValor != null && !fechaValor.equals("")) {
+                cpMovimientoCuentaAhorro.setEstadoBoletaDeposito(Constante.ESTADO_PENDIENTE_BOLETA_DEPOSITO);
+            }
+
+            cpMovimientoCuentaAhorroInterfaceLocal.save(cpMovimientoCuentaAhorro, beanGEAuditoriaGrabar);
+            if (!NO_ERROR.equals(errorCode)) {
+                sessionContext.setRollbackOnly();
+                cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
+                                                                     numeroCuenta,
+                                                                     "CECuentaEfectivoFacade.depositoAhorro()",
+                                                                     errorCode,
+                                                                     "");
+                return errorCode;// Error en generador de transacciones
+            }
+        } catch (Exception e) {
+            String msgError = e.getClass().getName() + " " + e.getMessage();
+            msgError = msgError.length() > 2000 ? msgError.substring(0, 2000) : msgError;
+            if (clPersonas == null) {
+                errorCode = "135";
+                cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
+                                                                     numeroCuenta,
+                                                                     "CECuentaEfectivoFacade.depositoAhorro()",
+                                                                     errorCode,
+                                                                     msgError);
+            } else
+                cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
+                                                                     "CECuentaEfectivoFacade.deposito()",
+                                                                     msgError);
+
+            if ("000".equals(errorCode))
+                errorCode = e.getMessage();
+            if (errorCode != null) {
+                sessionContext.setRollbackOnly();
+                return errorCode;
+            } else
+                throw e;
+        }
+        return NO_ERROR;
+    }
    
    @SuppressWarnings("unchecked")
    public String retiroAhorro(
@@ -1739,11 +1668,11 @@
          }        
          // Fin [Req. 14-030] fvalle 25.03.2015
          
-		 //Inicio [Req. 14-138] gmeza 18.09.2015
-		 if(_equiv(Constante.CONCEPTO_OPERACION_OP143, codigoConceptoOperacion)){
+         //Inicio [Req. 14-138] gmeza 18.09.2015
+         if(_equiv(Constante.CONCEPTO_OPERACION_OP143, codigoConceptoOperacion)){
             codigoCanal = codigoCanalOperacion;
-		 }
-		 //Fin [Req. 14-138]
+         }
+         //Fin [Req. 14-138]
          
          // //////////////////////////////////////////////////////////////////////////////////////////////////
          // OBTENER LOS DATOS ANTERIORES PARA LA GENERACION DEL MOVIMIENTO
@@ -1883,7 +1812,7 @@
             bean.setCodigoConcepto(codigoConceptoOperacion);
             //ini jaramirez Req s14-107 25.10.2014
             //[Req. 14-138] gmeza 18.09.2015
-			if(!codigoConceptoOperacion.equals(admin.util.Constante.TRANSACCION_NOTA_CARGO) && !_equiv(codigoConceptoOperacion,financ.util.Constante.CONCEPTO_OPERACION_OP143)){
+            if(!codigoConceptoOperacion.equals(admin.util.Constante.TRANSACCION_NOTA_CARGO) && !_equiv(codigoConceptoOperacion,financ.util.Constante.CONCEPTO_OPERACION_OP143)){
                bean.setCodigoSubConcepto(codigoEmpresa+codigoConceptoOperacion+"999");
             }   
             else{
@@ -3201,4 +3130,4 @@
       return null;
    }
 
-}
+}
\ No newline at end of file
diff --git a/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPCuentasPasivasFacade.java b/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPCuentasPasivasFacade.java
index 7c16eb8..2977f8b 100644
--- a/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPCuentasPasivasFacade.java
+++ b/FINANCIERONEW/src/financ/cuentaspasivas/facade/CPCuentasPasivasFacade.java
@@ -548,80 +548,221 @@
       }
    }
 //Fin [Req. 15-031]
- /**
-  * @author 
-  * @since  15.04.2011  fvalle: Se agrega el campo de la Remuneracion acumulada. 
-  * 
-  */  
-   @SuppressWarnings("unchecked")
-   public Map apertura(
-         String  numeroCuentaAGenerar, 
-         String  codigoClaseProducto,
-         String  indicadorModificadorApertura, 
-         Date    fechaProceso, 
-         String  horaProceso,
-         String  codigoEmpresa, 
-         String  codigoAgencia, 
-         String  codigoProducto, 
-         String  codigoTipoTasa,
-         String  indicadorTasaEspecial, 
-         Double  valorTasaInteres, 
-         Double  montoTotalApertura,
-         String  codigoTipoCuenta, 
-         Integer numeroFirmas, 
-         Integer numeroFirmasObligatorias,
-         String  codigoUsuarioApertura, 
-         String  codigoUsuarioAutorizaCambioTasa, 
-            String  codigoUsuarioAutorizaTipoCambioEspecial, 
-         String  codigoUsuarioAutorizaEfectivizacion,
-            String  codigoMonedaEfectivo, 
-         Double  montoEfectivo, 
-         Double  montoDepositoEfectivo,
-            Double  montoDepositoCheque, 
-         Double  montoDepositoVoucherBancos,
-            Double  montoDepositoTransferencia, 
-            Double  montoDepositoCuentaContable,
-         String  indicadorMenorEdad, 
-         String  observaciones,
-            Double  valorTipoCambioEspecial,
-         Double  valorTipoCambioNormal, 
-         Vector  titulares,
-            Vector  representantes, 
-         String  codigoEmpresaEmpleadora, 
-         String  tipoPlanilla,
-            Integer numeroDiasPlazo, 
-         String  tipoApertura, 
-         String  numeroCuentaAhorroRelacionada,
-            Vector  chequesDeposito, 
-         Vector  voucherBancosDeposito,
-            Vector  cuentasDeTransferenciaDeposito,
-         String  cuentasContables,
-         String  numeroCuenta,
-         String  formaDeposito,
-         String  conceptoOperacion,
-         String  subConceptoOperacion,
-         String  usuario,
-         String  terminal,
-         String  ip,
-         String  codigoProceso,
-         String  codigoEstado,
-         //mnieves 08.04.2011
-         String strVendedor,
-         String strCodAge,
-         //fvalle  25.04.2011
-         Double  remuneracionAcumulada,
-         //mnieves 15.04.2011
-         String strIndicadorTransferencia,
-         String strEntidadFinanciera,
-         String strNroReferencia,
-         //mnieves 25.04.2011
-         String strTipoPago,
-         //evargas 08.05.2012
-         List lstSaldosPendientes,
-         String indIncrementoCapital,
-         String strTipoCuentaMan,
-         String strComentario
-            )    
+   
+    //Inicio [Req.17-033] acnunez 15.06.2017
+    public Map apertura(String numeroCuentaAGenerar,
+                        String codigoClaseProducto,
+                        String indicadorModificadorApertura,
+                        Date fechaProceso,
+                        String horaProceso,
+                        String codigoEmpresa,
+                        String codigoAgencia,
+                        String codigoProducto,
+                        String codigoTipoTasa,
+                        String indicadorTasaEspecial,
+                        Double valorTasaInteres,
+                        Double montoTotalApertura,
+                        String codigoTipoCuenta,
+                        Integer numeroFirmas,
+                        Integer numeroFirmasObligatorias,
+                        String codigoUsuarioApertura,
+                        String codigoUsuarioAutorizaCambioTasa,
+                        String codigoUsuarioAutorizaTipoCambioEspecial,
+                        String codigoUsuarioAutorizaEfectivizacion,
+                        String codigoMonedaEfectivo,
+                        Double montoEfectivo,
+                        Double montoDepositoEfectivo,
+                        Double montoDepositoCheque,
+                        Double montoDepositoVoucherBancos,
+                        Double montoDepositoTransferencia,
+                        Double montoDepositoCuentaContable,
+                        String indicadorMenorEdad,
+                        String observaciones,
+                        Double valorTipoCambioEspecial,
+                        Double valorTipoCambioNormal,
+                        Vector titulares,
+                        Vector representantes,
+                        String codigoEmpresaEmpleadora,
+                        String tipoPlanilla,
+                        Integer numeroDiasPlazo,
+                        String tipoApertura,
+                        String numeroCuentaAhorroRelacionada,
+                        Vector chequesDeposito,
+                        Vector voucherBancosDeposito,
+                        Vector cuentasDeTransferenciaDeposito,
+                        String cuentasContables,
+                        String numeroCuenta,
+                        String formaDeposito,
+                        String conceptoOperacion,
+                        String subConceptoOperacion,
+                        String usuario,
+                        String terminal,
+                        String ip,
+                        String codigoProceso,
+                        String codigoEstado,
+                        //mnieves 08.04.2011
+                        String strVendedor,
+                        String strCodAge,
+                        //fvalle  25.04.2011
+                        Double remuneracionAcumulada,
+                        //mnieves 15.04.2011
+                        String strIndicadorTransferencia,
+                        String strEntidadFinanciera,
+                        String strNroReferencia,
+                        //mnieves 25.04.2011
+                        String strTipoPago,
+                        //evargas 08.05.2012
+                        List lstSaldosPendientes,
+                        String indIncrementoCapital,
+                        String strTipoCuentaMan,
+                        String strComentario) {
+
+        String modulo = "apertura.CPCuentasPasivasFacade";
+        Map output = new HashMap();
+        try {
+            output = apertura(numeroCuentaAGenerar,
+                              codigoClaseProducto,
+                              indicadorModificadorApertura,
+                              fechaProceso,
+                              horaProceso,
+                              codigoEmpresa,
+                              codigoAgencia,
+                              codigoProducto,
+                              codigoTipoTasa,
+                              indicadorTasaEspecial,
+                              valorTasaInteres,
+                              montoTotalApertura,
+                              codigoTipoCuenta,
+                              numeroFirmas,
+                              numeroFirmasObligatorias,
+                              codigoUsuarioApertura,
+                              codigoUsuarioAutorizaCambioTasa,
+                              codigoUsuarioAutorizaTipoCambioEspecial,
+                              codigoUsuarioAutorizaEfectivizacion,
+                              codigoMonedaEfectivo,
+                              montoEfectivo,
+                              montoDepositoEfectivo,
+                              montoDepositoCheque,
+                              montoDepositoVoucherBancos,
+                              montoDepositoTransferencia,
+                              montoDepositoCuentaContable,
+                              indicadorMenorEdad,
+                              observaciones,
+                              valorTipoCambioEspecial,
+                              valorTipoCambioNormal,
+                              titulares,
+                              representantes,
+                              codigoEmpresaEmpleadora,
+                              tipoPlanilla,
+                              numeroDiasPlazo,
+                              tipoApertura,
+                              numeroCuentaAhorroRelacionada,
+                              chequesDeposito,
+                              voucherBancosDeposito,
+                              cuentasDeTransferenciaDeposito,
+                              cuentasContables,
+                              numeroCuenta,
+                              formaDeposito,
+                              conceptoOperacion,
+                              subConceptoOperacion,
+                              usuario,
+                              terminal,
+                              ip,
+                              codigoProceso,
+                              codigoEstado,
+                              strVendedor,
+                              strCodAge,
+                              remuneracionAcumulada,
+                              strIndicadorTransferencia,
+                              strEntidadFinanciera,
+                              strNroReferencia,
+                              strTipoPago,
+                              lstSaldosPendientes,
+                              indIncrementoCapital,
+                              strTipoCuentaMan,
+                              strComentario,
+                              "");
+        } catch (Exception e) {
+            handlerError(e, usuario, modulo);
+            output.put("strError", ERROR_NO_CONTROLADO);
+        }
+        return output;
+    }
+
+    //Fin [Req.17-033]
+    /**
+     * @author
+     * @since 15.04.2011 fvalle: Se agrega el campo de la Remuneracion acumulada.
+     * 
+     */
+    @SuppressWarnings("unchecked")
+    public Map apertura(String numeroCuentaAGenerar,
+                        String codigoClaseProducto,
+                        String indicadorModificadorApertura,
+                        Date fechaProceso,
+                        String horaProceso,
+                        String codigoEmpresa,
+                        String codigoAgencia,
+                        String codigoProducto,
+                        String codigoTipoTasa,
+                        String indicadorTasaEspecial,
+                        Double valorTasaInteres,
+                        Double montoTotalApertura,
+                        String codigoTipoCuenta,
+                        Integer numeroFirmas,
+                        Integer numeroFirmasObligatorias,
+                        String codigoUsuarioApertura,
+                        String codigoUsuarioAutorizaCambioTasa,
+                        String codigoUsuarioAutorizaTipoCambioEspecial,
+                        String codigoUsuarioAutorizaEfectivizacion,
+                        String codigoMonedaEfectivo,
+                        Double montoEfectivo,
+                        Double montoDepositoEfectivo,
+                        Double montoDepositoCheque,
+                        Double montoDepositoVoucherBancos,
+                        Double montoDepositoTransferencia,
+                        Double montoDepositoCuentaContable,
+                        String indicadorMenorEdad,
+                        String observaciones,
+                        Double valorTipoCambioEspecial,
+                        Double valorTipoCambioNormal,
+                        Vector titulares,
+                        Vector representantes,
+                        String codigoEmpresaEmpleadora,
+                        String tipoPlanilla,
+                        Integer numeroDiasPlazo,
+                        String tipoApertura,
+                        String numeroCuentaAhorroRelacionada,
+                        Vector chequesDeposito,
+                        Vector voucherBancosDeposito,
+                        Vector cuentasDeTransferenciaDeposito,
+                        String cuentasContables,
+                        String numeroCuenta,
+                        String formaDeposito,
+                        String conceptoOperacion,
+                        String subConceptoOperacion,
+                        String usuario,
+                        String terminal,
+                        String ip,
+                        String codigoProceso,
+                        String codigoEstado,
+                        //mnieves 08.04.2011
+                        String strVendedor,
+                        String strCodAge,
+                        //fvalle  25.04.2011
+                        Double remuneracionAcumulada,
+                        //mnieves 15.04.2011
+                        String strIndicadorTransferencia,
+                        String strEntidadFinanciera,
+                        String strNroReferencia,
+                        //mnieves 25.04.2011
+                        String strTipoPago,
+                        //evargas 08.05.2012
+                        List lstSaldosPendientes,
+                        String indIncrementoCapital,
+                        String strTipoCuentaMan,
+                        String strComentario,
+                        String fecValorDeposito)//[Req.17-033] acnunez 15.06.2017
 
          throws Exception {
       // ******************************************************************************************************************
@@ -649,6 +790,7 @@
       String indicadorGananciaInteres = "S";
       String errorCode = null;
       String numeroCertificado="";
+      Date fechaValorApertura;//[Req.17-033] acnunez 16.06.2017
 
       Double valorTipoCambio = dValorTipoCambioEspecial > 0 ? valorTipoCambioEspecial
             : valorTipoCambioNormal;
@@ -664,6 +806,14 @@
          //
          // Obtiene los parametros de los diferentes tipos de productos
          //
+         
+         //Inicio [Req.17-033] acnunez 16.06.2017
+         if (_isEmpty(fecValorDeposito)){
+             fechaValorApertura = fechaProceso;
+         }else{
+             fechaValorApertura = FormatoFecha.stringToSqlDate(fecValorDeposito);
+         }
+         //Fin [Req.17-033]
          
          if (CUENTA_AHORRO.equals(codigoClaseProducto)) {
             cpProductoCuentaAhorro = cpProductoCuentaAhorroInterfaceLocal.findById(codigoProducto);
@@ -945,7 +1095,7 @@
          cpMaestroCuentas.setCpTipoTasaInteres(cpTipoTasaInteres);
          cpMaestroCuentas.setValorTasaInteres(valorTasaInteres);
          //cpMaestroCuentas.setMontoApertura(montoTotalApertura);
-         cpMaestroCuentas.setFechaApertura(fechaProceso);
+         cpMaestroCuentas.setFechaApertura(fechaValorApertura);//[Req.17-033] acnunez 16.06.2017
          //
          CLClientes clClientes = new CLClientes();
          clClientes.setCodigoCliente(codigoClienteTitular);
@@ -1218,7 +1368,7 @@
                   cpMaestroCuentasPlazoFijo.setCpTipoTasaInteres(cpTipoTasaInteres);
                   cpMaestroCuentasPlazoFijo.setValorTasaInteres(dblTasaInteres);
                   cpMaestroCuentasPlazoFijo.setMontoApertura(new Double(0));
-                  cpMaestroCuentasPlazoFijo.setFechaApertura(fechaProceso);
+                  cpMaestroCuentasPlazoFijo.setFechaApertura(fechaValorApertura);//[Req.17-033] acnunez 16.06.2017
                   //
                   clClientes = new CLClientes();
                   clClientes.setCodigoCliente(codigoClienteTitular);
@@ -1408,7 +1558,7 @@
                   output.put("strError", strError);
                   return output;
             }
-            Date fechaVencimientoProgramado = geGeneralesFacadeInterfaceLocal.agregarDiasAFecha(new java.sql.Date(fechaProceso.getTime()), 
+            Date fechaVencimientoProgramado = geGeneralesFacadeInterfaceLocal.agregarDiasAFecha(new java.sql.Date(fechaValorApertura.getTime()), //[Req.17-033] acnunez 16.06.2017
                                                                            numeroDiasPlazo.intValue(), 
                                                                            constante, 
                                                                            "P");
@@ -1426,7 +1576,7 @@
             cpCuentasPlazoFijo.setCpMaestroCuentas(cpMaestroCuentas);
             //
             cpCuentasPlazoFijo.setCapitalPlazoFijo(montoTotalApertura);
-            cpCuentasPlazoFijo.setFechaVigencia(fechaProceso);
+            cpCuentasPlazoFijo.setFechaVigencia(fechaValorApertura);//[Req.17-033] acnunez 16.06.2017
             cpCuentasPlazoFijo.setNumeroDiasPlazo(new Long(numeroDiasPlazo.toString()));
             cpCuentasPlazoFijo.setFechaVencimientoProgramado(fechaVencimientoProgramado);
             cpCuentasPlazoFijo.setMontoInteresTotalRetirado(cero);
@@ -1641,7 +1791,7 @@
                      codigoUsuarioAutorizaCambioTasa, // codigoUsuarioAutorizaCambioTasa
                      codigoUsuarioAutorizaTipoCambioEspecial, // codigoUsuarioAutorizaTipoCambioEspecial
                      codigoUsuarioAutorizaEfectivizacion, // codigoUsuarioAutorizaEfectivizacion
-                     fechaProceso, // fechaProceso
+                     fechaValorApertura, //[Req.17-033] acnunez 16.06.2017
                      horaProceso, // horaProceso
                      numeroCuenta, // numeroCuenta
                      cpMaestroCuentas.getCodigoMoneda(), // codigoMonedaCuenta
@@ -4333,13 +4483,15 @@
                   
                   String indEmpresaLucrativa = "N";
                   // gAlmerco 15.10.2013 - Solo se tendra en cuenta el valor N
-                  if (!CUENTA_AHORRO.equals(cpMaestroCuentas.getCpClaseCuenta().getCodigoClaseCuenta())){
-                     if(cpMaestroCuentas.getClClientes().getClPersonas().getClTipoPersona().getCodigoTipoPersona().equals("J")){
-                        CLPersonasJuridicas clPersonasJuridicas=clPersonasJuridicasInterfaceLocal.findById(cpMaestroCuentas.getClClientes().getCodigoCliente());
-                        indEmpresaLucrativa=clPersonasJuridicas.getIndicadorLucrativo();
-                     }else{
-                        indEmpresaLucrativa="N";
-                     }
+                  if (!_isEmpty(cpMaestroCuentas)){//[Req.17-033] acnunez 15.06.2017
+                      if (!_isEmpty(cpMaestroCuentas.getClClientes())){//[Req.17-033] acnunez 15.06.2017
+                          if(cpMaestroCuentas.getClClientes().getClPersonas().getClTipoPersona().getCodigoTipoPersona().equals("J")){
+                              CLPersonasJuridicas clPersonasJuridicas=clPersonasJuridicasInterfaceLocal.findById(cpMaestroCuentas.getClClientes().getCodigoCliente());
+                              indEmpresaLucrativa=clPersonasJuridicas.getIndicadorLucrativo();
+                          }else{
+                             indEmpresaLucrativa="N";
+                          }
+                      }
                   }
 
                   Map mapImpuesto = opBNTransaccionesFacadeInterfaceLocal.generarTransaccionFinanciera(numeroTransaccionOperacion.toString(), 
@@ -6555,17 +6707,16 @@
                                                         controlLavadoActivos,
                                                         generarAsiento,
                                                         null);*/
-         String indEmpresaLucrativa = "";
-         if (conceptoOperacionFinanciera.equals(Constante.COD_OPE_DEP_AHO) 
-               || conceptoOperacionFinanciera.equals(Constante.COD_OPE_RET_AHO)) {
-            indEmpresaLucrativa = "N";
-         } else {
-            if(clPersonas.getClTipoPersona().getCodigoTipoPersona().equals("J")){
-               CLPersonasJuridicas clPersonasJuridicas=clPersonasJuridicasInterfaceLocal.findById(clPersonas.getCodigoPersona());
-               indEmpresaLucrativa=clPersonasJuridicas.getIndicadorLucrativo();
-            } else {
-               indEmpresaLucrativa="N";
-            }
+         String indEmpresaLucrativa = "N";
+         if (!_isEmpty(clPersonas)) {//[Req.17-033] acnunez 15.06.2017
+             if (!_isEmpty(clPersonas.getClTipoPersona())){//[Req.17-033] acnunez 15.06.2017
+                 if (clPersonas.getClTipoPersona().getCodigoTipoPersona().equals("J")) {
+                     CLPersonasJuridicas clPersonasJuridicas = clPersonasJuridicasInterfaceLocal.findById(clPersonas.getCodigoPersona());
+                     indEmpresaLucrativa = clPersonasJuridicas.getIndicadorLucrativo();
+                 } else {
+                     indEmpresaLucrativa = "N";
+                 }
+             }
          }
          if(codigoConceptoOperacion.equals("OP005") && conceptoOperacionFinanciera.equals("401") ){
             controlLavadoActivos="N"; 
@@ -6589,6 +6740,10 @@
              Constante.CODIGO_OPERACION_FINANCIERA_PAGO_CARGO_A_CUENTA.equals(conceptoOperacionFinanciera) && 
               Constante.IND_FORMAPAGO_NOTA_CARGO.equals(tipoPago)){
                columna23=Constante.SUBCONCEPTO_RETIRO_FONDO_PAGO_CREDITO; 
+         }else if(Constante.CONCEPTO_OPERACION_REGULARIZACION_REV_PAG_CRE.equals(codigoConceptoOperacion) && 
+              Constante.COD_OPE_FIN_ANU_RET.equals(conceptoOperacionFinanciera) && 
+              Constante.TIPO_NOTA_ABONO.equals(tipoPago)){
+               columna23=Constante.SUBCONCEPTO_OPERACION_REGULARIZACION_REV_PAG_CRE; 
          }  
          // Fin [Req. 14-030] fvalle 25.03.2015
 
@@ -10770,6 +10925,20 @@
                usuario,
                terminal,
                ip);
+         //Inicio [Req.17-033] acnunez 21.06.2017
+         BeanParametrosAuditoria beanParametrosAuditoria = new BeanParametrosAuditoria();
+         beanParametrosAuditoria.setCodigoAgencia(codigoAgencia);
+         beanParametrosAuditoria.setCodigoEmpresa(codigoEmpresa);
+         beanParametrosAuditoria.setFechaProceso(fechaProceso);;
+         beanParametrosAuditoria.setFechaInsercion(new Date(System.currentTimeMillis()));
+         beanParametrosAuditoria.setUsuarioInsercion(usuario);
+         beanParametrosAuditoria.setTerminalInsercion(terminal);
+         beanParametrosAuditoria.setIpInsercion(ip);
+         beanParametrosAuditoria.setFechaModificacion(new Date(System.currentTimeMillis()));
+         beanParametrosAuditoria.setUsuarioModificacion(usuario);
+         beanParametrosAuditoria.setTerminalModificacion(terminal);
+         beanParametrosAuditoria.setIpModificacion(ip);
+         //Fin [Req.17-033]
             /////////////////////////////////////////////////////////////////////////////////////////////////
             // Obtener datos de la cuenta
             /////////////////////////////////////////////////////////////////////////////////////////////////
@@ -11348,17 +11517,6 @@
 
                     //Inicio [Req. 15-031] jtomasto 26.05.2015
                     try {
-                        BeanParametrosAuditoria beanParametrosAuditoria = new BeanParametrosAuditoria();
-                        beanParametrosAuditoria.setCodigoEmpresa(codigoEmpresa);
-                        beanParametrosAuditoria.setFechaInsercion(fechaProceso);
-                        beanParametrosAuditoria.setFechaModificacion(fechaProceso);
-                        beanParametrosAuditoria.setUsuarioInsercion(usuario);
-                        beanParametrosAuditoria.setUsuarioModificacion(usuario);
-                        beanParametrosAuditoria.setTerminalInsercion(terminal);
-                        beanParametrosAuditoria.setTerminalModificacion(terminal);
-                        beanParametrosAuditoria.setIpInsercion(ip);
-                        beanParametrosAuditoria.setIpModificacion(ip);
-
                         cpRegistroOrdenesPagoFacadeInterfaceLocal.anularOrdenesPagoChequexCuenta(numeroCuenta,
                                                                                                  beanParametrosAuditoria);
                     } catch (Exception e) {
@@ -11393,7 +11551,7 @@
                 // Obtener Monto de Operacion
                 /////////////////////////////////////////////////////////////////////////////////////////////////           
 
-                castigarCapital(interesRecalculado, cpMaestroCuentasOrigen, getBeanParametrosAuditoria(beanGEAuditoriaActualizar));//[Req.17-033] acnunez 01.06.2017
+                castigarCapital(interesRecalculado, cpMaestroCuentasOrigen, beanParametrosAuditoria);//[Req.17-033] acnunez 01.06.2017
                 
                 if (CUENTA_CTS.equals(codigoTipoCuenta)) {
                     //Al disponible le suma la parte intangible
@@ -21750,8 +21908,6 @@
 
             montoAcastigar = montoAcastigar - montoInteresCastigado;
 
-            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-
             CPCuentasPlazoFijo cpCuentasPlazoFijo = cpCuentasPlazoFijoInterfaceLocal.findById(cpMaestroCuentas.getNumeroCuenta());
 
             BigDecimal montoSaldoDisponibleAntesMovimiento = new BigDecimal(cpMaestroCuentas.getMontoSaldoDisponible().toString());
@@ -21787,7 +21943,7 @@
                                                                                                                                                     BigDecimal.ROUND_HALF_EVEN).doubleValue());
 
             if (montoAcastigar > 0) {
-                codigoCanalOperacion = "001";
+                codigoCanalOperacion = "002";
 
                 beanAjuste = new financ.operaciones.beans.DetalleBean();
                 beanAjuste.setCodigoSubConcepto(Constante.SUBCONCEPTO_OPERACION_CASTIGO_CAPITAL);
@@ -21797,15 +21953,15 @@
                 numeroTx = cbCorrelativoInterfaceLocal.GenerarCorrelativo(Constante.ID_TFC,
                                                                           "OPMTRAD",
                                                                           15,
-                                                                          beanParametrosAuditoria.getUsuarioModificacion(),
-                                                                          beanParametrosAuditoria.getTerminalModificacion(),
-                                                                          beanParametrosAuditoria.getIpModificacion());
+                                                                          beanParametrosAuditoria.getUsuarioInsercion(),
+                                                                          beanParametrosAuditoria.getTerminalInsercion(),
+                                                                          beanParametrosAuditoria.getIpInsercion());
                 numeroCorrelativoOperacion = opBNCorrelativoTransaccionesFacadeInterfaceLocal.generar(Constante.ID_TFC,
                                                                                                       Constante.CODIGO_AGENCIA_OFICINA_PRINCIPAL,
-                                                                                                      FormatoFecha.dateUtilToSQLDate(beanParametrosAuditoria.getFechaModificacion()),
-                                                                                                      beanParametrosAuditoria.getUsuarioModificacion(),
-                                                                                                      beanParametrosAuditoria.getTerminalModificacion(),
-                                                                                                      beanParametrosAuditoria.getIpModificacion());
+                                                                                                      FormatoFecha.dateUtilToSQLDate(beanParametrosAuditoria.getFechaProceso()),
+                                                                                                      beanParametrosAuditoria.getUsuarioInsercion(),
+                                                                                                      beanParametrosAuditoria.getTerminalInsercion(),
+                                                                                                      beanParametrosAuditoria.getIpInsercion());
 
                 Map mapTransaccion = opBNTransaccionesFacadeInterfaceLocal.generarTransaccionFinanciera(numeroTx,
                                                                                                         numeroTx,
@@ -21823,12 +21979,12 @@
                                                                                                         Constante.CODIGO_AGENCIA_OFICINA_PRINCIPAL,
                                                                                                         Constante.CODIGO_AGENCIA_OFICINA_PRINCIPAL, //codigoAgenciaOrigen, 
                                                                                                         Constante.CODIGO_AGENCIA_OFICINA_PRINCIPAL, //codigoAgenciaCartera, 
-                                                                                                        beanParametrosAuditoria.getUsuarioModificacion(),
+                                                                                                        beanParametrosAuditoria.getUsuarioInsercion(),
                                                                                                         codigoEntidadManejadoraAjuste,
-                                                                                                        FormatoFecha.dateUtilToSQLDate(beanParametrosAuditoria.getFechaModificacion()),
+                                                                                                        FormatoFecha.dateUtilToSQLDate(beanParametrosAuditoria.getFechaProceso()),
                                                                                                         hora.obtenerHora(),
                                                                                                         "S", //estadoRegistro, 
-                                                                                                        FormatoFecha.dateUtilToSQLDate(beanParametrosAuditoria.getFechaModificacion()), //fechaValuta, 
+                                                                                                        FormatoFecha.dateUtilToSQLDate(beanParametrosAuditoria.getFechaProceso()), //fechaValuta, 
                                                                                                         null, //fechaAnulacionTransaccion, 
                                                                                                         null, //usuarioAnuloTransaccion, 
                                                                                                         null, //observacionAnulacion, 
@@ -21895,14 +22051,14 @@
                                                                                                         "S", //controlLavadoActivos, 
                                                                                                         "S", //generarAsiento, 
                                                                                                         null, //indicadoRegularizacion, 
-                                                                                                        beanParametrosAuditoria.getUsuarioModificacion(),
-                                                                                                        beanParametrosAuditoria.getTerminalModificacion(),
-                                                                                                        beanParametrosAuditoria.getIpModificacion());
+                                                                                                        beanParametrosAuditoria.getUsuarioInsercion(),
+                                                                                                        beanParametrosAuditoria.getTerminalInsercion(),
+                                                                                                        beanParametrosAuditoria.getIpInsercion());
 
                 errorCode = mapTransaccion.get("strError").toString();
                 if (!NO_ERROR.equals(errorCode)) {
                     sessionContext.setRollbackOnly();
-                    cbControlErroresFacadeInterfaceLocal.crearLogErrores(beanParametrosAuditoria.getUsuarioModificacion(),
+                    cbControlErroresFacadeInterfaceLocal.crearLogErrores(beanParametrosAuditoria.getUsuarioInsercion(),
                                                                          cpMaestroCuentas.getNumeroCuenta(),
                                                                          "CPCuentasPasivasFacade.castigarCapital()",
                                                                          errorCode,
@@ -21913,11 +22069,11 @@
                         List lstTransacciones = new ArrayList();
 
                         String transaccionContable = opBNTransaccionesFacadeInterfaceLocal.obtenerNumeroTransaccionContable(new Long(numeroTransaccion),
-                                                                                                                            beanParametrosAuditoria.getUsuarioModificacion());
+                                                                                                                            beanParametrosAuditoria.getUsuarioInsercion());
                         if (transaccionContable != null && !transaccionContable.equals("")) {
                             lstTransacciones.add(new Long(transaccionContable));
-                            cgGenerarAsientoMdbFacadeLocal.generarAsientoContable(beanParametrosAuditoria.getTerminalModificacion(),
-                                                                                  beanParametrosAuditoria.getIpModificacion(),
+                            cgGenerarAsientoMdbFacadeLocal.generarAsientoContable(beanParametrosAuditoria.getTerminalInsercion(),
+                                                                                  beanParametrosAuditoria.getIpInsercion(),
                                                                                   lstTransacciones,
                                                                                   Constante.CODIGO_AGENCIA_OFICINA_PRINCIPAL,
                                                                                   beanParametrosAuditoria.getUsuarioInsercion(),
@@ -21927,7 +22083,7 @@
                 }
 
                 Calendar calendario = Calendar.getInstance();
-                calendario.setTime(FormatoFecha.dateUtilToSQLDate(beanParametrosAuditoria.getFechaModificacion()));
+                calendario.setTime(FormatoFecha.dateUtilToSQLDate(beanParametrosAuditoria.getFechaProceso()));
                 correlativoMovimiento = cpMaestroCuentas.getCorrelativoMovimiento().intValue() + 1;
                 int mesMovimiento = calendario.get(Calendar.MONTH) + 1;
                 int anioMovimiento = calendario.get(Calendar.YEAR);
@@ -21951,9 +22107,9 @@
                 cpMovimientoPlazoFijoOP.setMontoCapitalPlazo(cpMaestroCuentas.getMontoSaldoCapital());
                 cpMovimientoPlazoFijoOP.setNumeroDiasPlazo(cpCuentasPlazoFijo.getNumeroDiasPlazo());
                 cpMovimientoPlazoFijoOP.setTasaInteres(cpMaestroCuentas.getValorTasaInteres());
-                cpMovimientoPlazoFijoOP.setFechaMovimiento(FormatoFecha.dateUtilToSQLDate(beanParametrosAuditoria.getFechaModificacion()));
+                cpMovimientoPlazoFijoOP.setFechaMovimiento(FormatoFecha.dateUtilToSQLDate(beanParametrosAuditoria.getFechaProceso()));
                 cpMovimientoPlazoFijoOP.setHoraMovimiento(hora.obtenerHora());
-                cpMovimientoPlazoFijoOP.setCodigoUsuarioMovimiento(beanParametrosAuditoria.getUsuarioModificacion());
+                cpMovimientoPlazoFijoOP.setCodigoUsuarioMovimiento(beanParametrosAuditoria.getUsuarioInsercion());
                 cpMovimientoPlazoFijoOP.setCodigoTipoDeposito("DT");
                 cpMovimientoPlazoFijoOP.setNumeroReferenciaTipoDeposito(null);
                 cpMovimientoPlazoFijoOP.setCodigoEmpresa(Constante.ID_TFC);
@@ -21983,9 +22139,9 @@
                 cpMovimientoPlazoFijoOP.setAnioMovimiento(new Long(anioMovimiento));
                 cpMovimientoPlazoFijoOP.setAgenciaOrigen(cpMaestroCuentas.getCodigoAgencia());
                 cpMovimientoPlazoFijoOP.setFechaInsercion(new Date(System.currentTimeMillis()));
-                cpMovimientoPlazoFijoOP.setUsuarioInsercion(beanParametrosAuditoria.getUsuarioModificacion());
-                cpMovimientoPlazoFijoOP.setTerminalInsercion(beanParametrosAuditoria.getTerminalModificacion());
-                cpMovimientoPlazoFijoOP.setIpInsercion(beanParametrosAuditoria.getIpModificacion());
+                cpMovimientoPlazoFijoOP.setUsuarioInsercion(beanParametrosAuditoria.getUsuarioInsercion());
+                cpMovimientoPlazoFijoOP.setTerminalInsercion(beanParametrosAuditoria.getTerminalInsercion());
+                cpMovimientoPlazoFijoOP.setIpInsercion(beanParametrosAuditoria.getIpInsercion());
                 cpMovimientoPlazoFijoOP.setNumeroOrdenPago(null);
                 cpMovimientoPlazoFijoInterfaceLocal.save(cpMovimientoPlazoFijoOP,
                                                          getBeanGEAuditoria(beanParametrosAuditoria));
@@ -22052,7 +22208,7 @@
             cpCuentasPasivasFacadeLocalInterno = (CPCuentasPasivasFacadeLocal) lookup(LocalJNDIName);
             
             for (CPMaestroCuentas cpMaestroCuentas : listCPMaestroCuentas) {
-                output = cpCuentasPasivasFacadeLocalInterno.activarCuentaPalzoFijo(codigoEmpresa,cpMaestroCuentas.getNumeroCuenta(),fechaCierre,beanGEAuditoria);
+                output = cpCuentasPasivasFacadeLocalInterno.activarCuentaPlazoFijo(codigoEmpresa,cpMaestroCuentas.getNumeroCuenta(),fechaCierre,beanGEAuditoria);
 
                 if (output.get("strError") != NO_ERROR) {
                     cantidadProcesadosConError++;
@@ -22112,7 +22268,7 @@
     }
 
     @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
-    public Map<String, String> activarCuentaPalzoFijo(String codigoEmpresa,
+    public Map<String, String> activarCuentaPlazoFijo(String codigoEmpresa,
                                                       String numeroCuenta,
                                                       String fechaCierre,
                                                       BeanGEAuditoria beanGEAuditoria) {
diff --git a/FINANCIERONEW/src/financ/cuentaspasivas/local/CPAnularTransaccionesFacadeLocal.java b/FINANCIERONEW/src/financ/cuentaspasivas/local/CPAnularTransaccionesFacadeLocal.java
index 4e36d1e..ef9b295 100644
--- a/FINANCIERONEW/src/financ/cuentaspasivas/local/CPAnularTransaccionesFacadeLocal.java
+++ b/FINANCIERONEW/src/financ/cuentaspasivas/local/CPAnularTransaccionesFacadeLocal.java
@@ -14,13 +14,12 @@
  * Contiene los metodos de anulaci�n de transacciones de cuentas pasivas.
  * 
  * @author dfujimoto
- * @since  08.11.2013
- * @see	   CPAnularTransaccionesFacade
+ * @since 08.11.2013
+ * @see CPAnularTransaccionesFacade
  */
 
 @Local
 public interface CPAnularTransaccionesFacadeLocal {
-	
-	public Map anularTransaccion(String numeroCuenta, String numeroTransaccion, BeanGEAuditoria beanGEAuditoria);
-	
+
+    public Map anularTransaccion(String numeroCuenta, String numeroTransaccion, BeanGEAuditoria beanGEAuditoria);
 }
diff --git a/FINANCIERONEW/src/financ/cuentaspasivas/local/CPCuentasPasivasFacadeLocal.java b/FINANCIERONEW/src/financ/cuentaspasivas/local/CPCuentasPasivasFacadeLocal.java
index 5af9e2b..22d43e7 100644
--- a/FINANCIERONEW/src/financ/cuentaspasivas/local/CPCuentasPasivasFacadeLocal.java
+++ b/FINANCIERONEW/src/financ/cuentaspasivas/local/CPCuentasPasivasFacadeLocal.java
@@ -1481,8 +1481,142 @@
      * @param beanGEAuditoria
      * @return
      */
-    public Map<String, String> activarCuentaPalzoFijo(String codigoEmpresa,
+    public Map<String, String> activarCuentaPlazoFijo(String codigoEmpresa,
                                                       String numeroCuenta,
                                                       String fechaCierre,
                                                       BeanGEAuditoria beanGEAuditoria);
+    /**
+     * @author acnunez
+     * @since [Req.17-033] 15.06.2017
+     * @param numeroCuentaAGenerar
+     * @param codigoClaseProducto
+     * @param indicadorModificadorApertura
+     * @param fechaProceso
+     * @param horaProceso
+     * @param codigoEmpresa
+     * @param codigoAgencia
+     * @param codigoProducto
+     * @param codigoTipoTasa
+     * @param indicadorTasaEspecial
+     * @param valorTasaInteres
+     * @param montoTotalApertura
+     * @param codigoTipoCuenta
+     * @param numeroFirmas
+     * @param numeroFirmasObligatorias
+     * @param codigoUsuarioApertura
+     * @param codigoUsuarioAutorizaCambioTasa
+     * @param codigoUsuarioAutorizaTipoCambioEspecial
+     * @param codigoUsuarioAutorizaEfectivizacion
+     * @param codigoMonedaEfectivo
+     * @param montoEfectivo
+     * @param montoDepositoEfectivo
+     * @param montoDepositoCheque
+     * @param montoDepositoVoucherBancos
+     * @param montoDepositoTransferencia
+     * @param montoDepositoCuentaContable
+     * @param indicadorMenorEdad
+     * @param observaciones
+     * @param valorTipoCambioEspecial
+     * @param valorTipoCambioNormal
+     * @param titulares
+     * @param representantes
+     * @param codigoEmpresaEmpleadora
+     * @param tipoPlanilla
+     * @param numeroDiasPlazo
+     * @param tipoApertura
+     * @param numeroCuentaAhorroRelacionada
+     * @param chequesDeposito
+     * @param voucherBancosDeposito
+     * @param cuentasDeTransferenciaDeposito
+     * @param cuentasContables
+     * @param numeroCuenta
+     * @param formaDeposito
+     * @param conceptoOperacion
+     * @param subConceptoOperacion
+     * @param usuario
+     * @param terminal
+     * @param ip
+     * @param codigoProceso
+     * @param codigoEstado
+     * @param strVendedor
+     * @param strCodAge
+     * @param remuneracionAcumulada
+     * @param strIndicadorTransferencia
+     * @param strEntidadFinanciera
+     * @param strNroReferencia
+     * @param strTipoPago
+     * @param lstSaldosPendientes
+     * @param indIncrementoCapital
+     * @param strTipoCuentaMan
+     * @param strComentario
+     * @param fecValorDeposito
+     * @return
+     */
+    public Map apertura(String numeroCuentaAGenerar,
+                        String codigoClaseProducto,
+                        String indicadorModificadorApertura,
+                        Date fechaProceso,
+                        String horaProceso,
+                        String codigoEmpresa,
+                        String codigoAgencia,
+                        String codigoProducto,
+                        String codigoTipoTasa,
+                        String indicadorTasaEspecial,
+                        Double valorTasaInteres,
+                        Double montoTotalApertura,
+                        String codigoTipoCuenta,
+                        Integer numeroFirmas,
+                        Integer numeroFirmasObligatorias,
+                        String codigoUsuarioApertura,
+                        String codigoUsuarioAutorizaCambioTasa,
+                        String codigoUsuarioAutorizaTipoCambioEspecial,
+                        String codigoUsuarioAutorizaEfectivizacion,
+                        String codigoMonedaEfectivo,
+                        Double montoEfectivo,
+                        Double montoDepositoEfectivo,
+                        Double montoDepositoCheque,
+                        Double montoDepositoVoucherBancos,
+                        Double montoDepositoTransferencia,
+                        Double montoDepositoCuentaContable,
+                        String indicadorMenorEdad,
+                        String observaciones,
+                        Double valorTipoCambioEspecial,
+                        Double valorTipoCambioNormal,
+                        Vector titulares,
+                        Vector representantes,
+                        String codigoEmpresaEmpleadora,
+                        String tipoPlanilla,
+                        Integer numeroDiasPlazo,
+                        String tipoApertura,
+                        String numeroCuentaAhorroRelacionada,
+                        Vector chequesDeposito,
+                        Vector voucherBancosDeposito,
+                        Vector cuentasDeTransferenciaDeposito,
+                        String cuentasContables,
+                        String numeroCuenta,
+                        String formaDeposito,
+                        String conceptoOperacion,
+                        String subConceptoOperacion,
+                        String usuario,
+                        String terminal,
+                        String ip,
+                        String codigoProceso,
+                        String codigoEstado,
+                        //mnieves 08.04.2011
+                        String strVendedor,
+                        String strCodAge,
+                        //fvalle  25.04.2011
+                        Double remuneracionAcumulada,
+                        //mnieves 15.04.2011
+                        String strIndicadorTransferencia,
+                        String strEntidadFinanciera,
+                        String strNroReferencia,
+                        //mnieves 25.04.2011
+                        String strTipoPago,
+                        //evargas 08.05.2012
+                        List lstSaldosPendientes,
+                        String indIncrementoCapital,
+                        String strTipoCuentaMan,
+                        String strComentario,
+                        String fecValorDeposito) throws Exception;
 }
diff --git a/FINANCIERONEW/src/financ/operaciones/facade/OPBNTransaccionesFacade.java b/FINANCIERONEW/src/financ/operaciones/facade/OPBNTransaccionesFacade.java
index 17cdc50..4711a5e 100644
--- a/FINANCIERONEW/src/financ/operaciones/facade/OPBNTransaccionesFacade.java
+++ b/FINANCIERONEW/src/financ/operaciones/facade/OPBNTransaccionesFacade.java
@@ -36,6 +36,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Vector;
 
 import javax.annotation.Resource;
 import javax.ejb.EJB;
@@ -129,6 +130,7 @@
 import financ.liquidacion.local.BTPreLiquidacionFacadeInterfaceLocal;
 import financ.liquidacion.local.BTPreliquidacionInterfaceLocal;
 import financ.operaciones.beans.BeanOPCabeceraTransaccionesAcumuladas;
+import financ.operaciones.beans.BeanOPCierreDiarioCaja;
 import financ.operaciones.beans.BeanOPDevolucionesRealizadas;
 import financ.operaciones.beans.BeanOPExonerados;
 import financ.operaciones.beans.DetalleBean;
@@ -160,6 +162,7 @@
 import financ.operaciones.entity.OPTransaccionesLAAprobadas;
 import financ.operaciones.local.CRBNOperacionesFacadeInterfaceLocal;
 import financ.operaciones.local.OPAnulacionPagoInstitucionesFacadeInterfaceLocal;
+import financ.operaciones.local.OPBNCorrelativoTransaccionesFacadeInterfaceLocal;
 import financ.operaciones.local.OPBNTransaccionesFacadeInterfaceLocal;
 import financ.operaciones.local.OPCabeceraTransaccionesAcumuladasInterfaceLocal;
 import financ.operaciones.local.OPCabeceraTransaccionesDiariasInterfaceLocal;
@@ -395,6 +398,11 @@
     @EJB
     private OPDetalleDepositosBancosAnexoFacadeInterfaceLocal opDetalleDepositosBancosAnexoFacadeInterfaceLocal;
     //Fin [Req.17-010]
+
+    //Inicio [Req.17-033] acnunez 16.06.2017
+    @EJB
+    private OPBNCorrelativoTransaccionesFacadeInterfaceLocal opBNCorrelativoTransaccionesFacadeInterfaceLocal;
+    //Fin [Req.17-033]
 
     @PersistenceContext
    private EntityManager entityManager;
@@ -944,35 +952,34 @@
       return output;
    }
     
-   /**
-     *   @since 19.11.2012 [fvalle]   Se agrega logica para restaurar al Estado 'Asignado' de un Recibo de Cobranza, luego de una anulaci�n. Ticket 3410.
-    */
-    public Map anularRegularizacion(
-         String codigoEmpresa,
-         String codigoAgencia,
-         String numeroTransaccion,
-         Date fechaOperacion,
-         String usuario,
-         String terminal,
-         String ip,
-         Timestamp fecha,
-         String tipoRegularizacion,
-         String motivoRegularizacion,
-         String observacionRegularizacion
-    ) throws Exception{
+    /**
+     * @since 19.11.2012 [fvalle] Se agrega logica para restaurar al Estado 'Asignado' de un Recibo de Cobranza, luego de una anulaci�n. Ticket 3410.
+     * @since [Req.17-033] acnunez se realiz� identaci�n del c�digo
+     */
+    public Map anularRegularizacion(String codigoEmpresa,
+                                    String codigoAgencia,
+                                    String numeroTransaccion,
+                                    Date fechaOperacion,
+                                    String usuario,
+                                    String terminal,
+                                    String ip,
+                                    Timestamp fecha,
+                                    String tipoRegularizacion,
+                                    String motivoRegularizacion,
+                                    String observacionRegularizacion) throws Exception {
         OPComprobanteIngresoEgreso lComprobante = null;
-        
-        Map output= new HashMap();
+
+        Map output = new HashMap();
         OPCabeceraTransaccionesDiarias movimiento = null;
         OPCabeceraTransaccionesAcumuladas movimientoAcumulado = null;
-        //List<OPCabeceraTransaccionesDiarias> movimientos = new ArrayList<OPCabeceraTransaccionesDiarias>();
         String clave = codigoEmpresa + "." + codigoAgencia + "." + numeroTransaccion + ".S";
         FormatoFecha f = new FormatoFecha();
         String moduleName = "OPBNTransacciones.anularRegularizacion()";
-        
+        String respuestaDeposito = NO_ERROR;//[Req.17-033] acnunez 16.06.2017
+        Double montoMovimientoConITF = 0.0;//[Req.17-033] acnunez 16.06.2017
 
-        try{
-         
+        try {
+
             // Inicio [CC16-034] DLAZO 22.07.2016
             BeanParametrosAuditoria beanParametrosAuditoria = new BeanParametrosAuditoria();
             beanParametrosAuditoria.setCodigoAgencia(codigoAgencia);
@@ -987,455 +994,515 @@
             beanParametrosAuditoria.setFechaModificacion(fecha);
             beanParametrosAuditoria.setFechaProceso(fechaOperacion);
             // Fin [CC16-034] DLAZO 22.07.2016
-         movimiento = opCabeceraTransaccionesDiariasInterfaceLocal.findById(new Long(numeroTransaccion));
-         movimientoAcumulado=opCabeceraTransaccionesAcumuladasInterfaceLocal.findById(new Long(numeroTransaccion));
-         
-         
-         if(movimiento!=null){
-            movimiento.setTipoRegularizacion(tipoRegularizacion);
-            movimiento.setEstadoRegularizacion("A");
-            if(motivoRegularizacion!=null && !motivoRegularizacion.equals("")){
-               OPMotivoReguLarizacion opMotivoReguLarizacion=new OPMotivoReguLarizacion();
-               opMotivoReguLarizacion.setMotivoRegularizacion(motivoRegularizacion);
-               movimiento.setOpMotivoReguLarizacion(opMotivoReguLarizacion);
-            }
-            movimiento.setObservacionRegularizacion(observacionRegularizacion!=null?observacionRegularizacion.toUpperCase():"");
-            movimientoAcumulado.setTipoRegularizacion(tipoRegularizacion);
-            movimientoAcumulado.setEstadoRegularizacion("A");
-            if(motivoRegularizacion!=null && !motivoRegularizacion.equals("")){
-               OPMotivoReguLarizacion opMotivoReguLarizacion=new OPMotivoReguLarizacion();
-               opMotivoReguLarizacion.setMotivoRegularizacion(motivoRegularizacion);
-               movimientoAcumulado.setOpMotivoReguLarizacion(opMotivoReguLarizacion);
-            }
-            movimientoAcumulado.setObservacionRegularizacion(observacionRegularizacion!=null?observacionRegularizacion.toUpperCase():"");
-             String codigoConceptoOperacion = movimiento.getCodigoOperacion();
-             
-          // [Req. S14-100] jventura 16.02.2016
-             String codigoSubConcepto = movimiento.getSubConceptoOperacion();
-   
-             //fechaOperacion = new Date(movimiento.getFechaProcesoTransaccion().getTime()); rasato 28.02.2011: Se deja de actualizar la fecha de proceso (fecha del d�a) con la fecha de la operaci�n orignal.
-             //la actualizacion de la fecha implicaba la posibilidad de generar un asiento con fecha de un mes cerrado
-                   
-               if ("OP010".equals(codigoConceptoOperacion)){
-                  //Abono de Credito - Normal
-                  //ANULA LA TRANSACCION EN CREDITOS              
-                  String errorCode = crBNOperacionesFacadeInterfaceLocal.aplicacionAbonoAnular(
-                        codigoEmpresa, codigoAgencia, movimiento.getNumeroTransaccion(), fechaOperacion, 
-                        f.obtenerHora(), usuario, terminal, ip);
-                  
-                        
-                  if(!errorCode.equals(NO_ERROR)){
-                     cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario, numeroTransaccion, moduleName, errorCode, "");
-                     sessionContext.setRollbackOnly();
-                     output.put("strError", errorCode);
-                       return output;
-                  }else{
-                     List cbRecibosCobranzaList=cbRecibosCobranzaInterfaceLocal.findNumeroTransaccion(codigoEmpresa,movimientoAcumulado.getNumeroTransaccion());
-                     if(cbRecibosCobranzaList.size()>0){
-                        CBRecibosCobranza cbRecibosCobranza=(CBRecibosCobranza)cbRecibosCobranzaList.get(0);
+            movimiento = opCabeceraTransaccionesDiariasInterfaceLocal.findById(new Long(numeroTransaccion));
+            movimientoAcumulado = opCabeceraTransaccionesAcumuladasInterfaceLocal.findById(new Long(numeroTransaccion));
+
+            if (movimiento != null) {
+                movimiento.setTipoRegularizacion(tipoRegularizacion);
+                movimiento.setEstadoRegularizacion("A");
+                if (motivoRegularizacion != null && !motivoRegularizacion.equals("")) {
+                    OPMotivoReguLarizacion opMotivoReguLarizacion = new OPMotivoReguLarizacion();
+                    opMotivoReguLarizacion.setMotivoRegularizacion(motivoRegularizacion);
+                    movimiento.setOpMotivoReguLarizacion(opMotivoReguLarizacion);
+                }
+                movimiento.setObservacionRegularizacion(observacionRegularizacion != null ? observacionRegularizacion.toUpperCase() : "");
+                movimientoAcumulado.setTipoRegularizacion(tipoRegularizacion);
+                movimientoAcumulado.setEstadoRegularizacion("A");
+                if (motivoRegularizacion != null && !motivoRegularizacion.equals("")) {
+                    OPMotivoReguLarizacion opMotivoReguLarizacion = new OPMotivoReguLarizacion();
+                    opMotivoReguLarizacion.setMotivoRegularizacion(motivoRegularizacion);
+                    movimientoAcumulado.setOpMotivoReguLarizacion(opMotivoReguLarizacion);
+                }
+                movimientoAcumulado.setObservacionRegularizacion(observacionRegularizacion != null ? observacionRegularizacion.toUpperCase() : "");
+                String codigoConceptoOperacion = movimiento.getCodigoOperacion();
+
+                // [Req. S14-100] jventura 16.02.2016
+                String codigoSubConcepto = movimiento.getSubConceptoOperacion();
+
+                //fechaOperacion = new Date(movimiento.getFechaProcesoTransaccion().getTime()); rasato 28.02.2011: Se deja de actualizar la fecha de proceso (fecha del d�a) con la fecha de la operaci�n orignal.
+                //la actualizacion de la fecha implicaba la posibilidad de generar un asiento con fecha de un mes cerrado
+
+                if ("OP010".equals(codigoConceptoOperacion)) {
+                    //Abono de Credito - Normal
+                    //ANULA LA TRANSACCION EN CREDITOS              
+                    String errorCode = crBNOperacionesFacadeInterfaceLocal.aplicacionAbonoAnular(codigoEmpresa,
+                                                                                                 codigoAgencia,
+                                                                                                 movimiento.getNumeroTransaccion(),
+                                                                                                 fechaOperacion,
+                                                                                                 f.obtenerHora(),
+                                                                                                 usuario,
+                                                                                                 terminal,
+                                                                                                 ip);
+
+                    if (!errorCode.equals(NO_ERROR)) {
+                        cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
+                                                                             numeroTransaccion,
+                                                                             moduleName,
+                                                                             errorCode,
+                                                                             "");
+                        sessionContext.setRollbackOnly();
+                        output.put("strError", errorCode);
+                        return output;
+                    } else {
+                        List cbRecibosCobranzaList = cbRecibosCobranzaInterfaceLocal.findNumeroTransaccion(codigoEmpresa,
+                                                                                                           movimientoAcumulado.getNumeroTransaccion());
+                        if (cbRecibosCobranzaList.size() > 0) {
+                            CBRecibosCobranza cbRecibosCobranza = (CBRecibosCobranza) cbRecibosCobranzaList.get(0);
+                            cbRecibosCobranza.setEstadoRecibo("A");
+                            cbRecibosCobranza.setOpCabeceraTransaccionesAcumuladas(null);
+                            cbRecibosCobranzaInterfaceLocal.update(cbRecibosCobranza);
+                        }
+
+                        //hpajuelo 27.12.2011 Anulacion de los depositos en efectivo relacionados - Lavado de Activos
+                        LAOperacionDepositoEfectivo laOperacionDepositoEfectivo = laOperacionesDepositosEfectivoFacadeInterfaceLocal.obtenerOperacion(movimientoAcumulado.getNumeroTransaccion().toString());
+                        if (laOperacionDepositoEfectivo != null) {
+                            laOperacionDepositoEfectivo.setEstadoRegistro("N");
+                            laOperacionDepositoEfectivoInterfaceLocal.update(laOperacionDepositoEfectivo);
+                        }
+                    }
+                } else if ("OP052".equals(codigoConceptoOperacion)) {
+                    //Desembolso de Credito - Normal
+                    String errorCode = crBNOperacionesFacadeInterfaceLocal.aplicacionDesembolsoAnular(codigoEmpresa,
+                                                                                                      codigoAgencia,
+                                                                                                      movimiento.getNumeroTransaccion(),
+                                                                                                      fechaOperacion,
+                                                                                                      fechaOperacion,
+                                                                                                      f.obtenerHora(),
+                                                                                                      "",
+                                                                                                      fecha,
+                                                                                                      usuario,
+                                                                                                      terminal,
+                                                                                                      ip);
+                    if (!errorCode.equals(NO_ERROR)) {
+                        cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario, clave, moduleName, errorCode, "");
+                        sessionContext.setRollbackOnly();
+                        output.put("strError", errorCode);
+                        return output;
+                    }
+                } else if ("EG001".equals(codigoConceptoOperacion) || "IG001".equals(codigoConceptoOperacion)) {
+                    List<OPComprobantesIngresoEgreso> list = opComprobantesIngresoEgresoInterfaceLocal.findByNumeroTransaccionGenerada(movimiento.getNumeroTransaccion());
+                    Iterator iIngresoEgreso = list.iterator();
+                    while (iIngresoEgreso.hasNext()) {
+                        OPComprobantesIngresoEgreso opComprobantesIngresoEgreso = (OPComprobantesIngresoEgreso) iIngresoEgreso.next();
+                        opComprobantesIngresoEgreso.setEstadoRegistro("N");
+                        opComprobantesIngresoEgresoInterfaceLocal.update(opComprobantesIngresoEgreso);
+                    }
+                    //fvalle 19.11.2012 Cambio de Estado a 'Asignado' - Recibo de Cobranza
+                    List cbRecibosCobranzaList = cbRecibosCobranzaInterfaceLocal.findNumeroTransaccion(codigoEmpresa,
+                                                                                                       movimiento.getNumeroTransaccion());
+                    if (cbRecibosCobranzaList.size() > 0) {
+                        CBRecibosCobranza cbRecibosCobranza = (CBRecibosCobranza) cbRecibosCobranzaList.get(0);
                         cbRecibosCobranza.setEstadoRecibo("A");
                         cbRecibosCobranza.setOpCabeceraTransaccionesAcumuladas(null);
                         cbRecibosCobranzaInterfaceLocal.update(cbRecibosCobranza);
-                     }
-                     
-                     //hpajuelo 27.12.2011 Anulacion de los depositos en efectivo relacionados - Lavado de Activos
-                     LAOperacionDepositoEfectivo laOperacionDepositoEfectivo = 
-                        laOperacionesDepositosEfectivoFacadeInterfaceLocal.obtenerOperacion(movimientoAcumulado.getNumeroTransaccion().toString());
-                     if(laOperacionDepositoEfectivo!=null){
+                    }
+                    //hpajuelo 28.12.2011 Anulacion de los depositos en efectivo relacionados - Lavado de Activos
+                    LAOperacionDepositoEfectivo laOperacionDepositoEfectivo = laOperacionesDepositosEfectivoFacadeInterfaceLocal.obtenerOperacion(movimiento.getNumeroTransaccion().toString());
+                    if (laOperacionDepositoEfectivo != null) {
                         laOperacionDepositoEfectivo.setEstadoRegistro("N");
                         laOperacionDepositoEfectivoInterfaceLocal.update(laOperacionDepositoEfectivo);
-                     }
-                  }
-               }else if ("OP052".equals(codigoConceptoOperacion)){
-                  //Desembolso de Credito - Normal
-                  String errorCode = crBNOperacionesFacadeInterfaceLocal.aplicacionDesembolsoAnular(
-                        codigoEmpresa, codigoAgencia, movimiento.getNumeroTransaccion(), fechaOperacion, 
-                        fechaOperacion, f.obtenerHora(), "", fecha, usuario, terminal, ip);
-                  if(!errorCode.equals(NO_ERROR)){
-                     cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario, clave, moduleName, errorCode, "");
-                     sessionContext.setRollbackOnly();
-                     output.put("strError", errorCode);
-                       return output;
-                  }   
-               }else if ("EG001".equals(codigoConceptoOperacion) || "IG001".equals(codigoConceptoOperacion)){
-                  List<OPComprobantesIngresoEgreso> list=opComprobantesIngresoEgresoInterfaceLocal.findByNumeroTransaccionGenerada(movimiento.getNumeroTransaccion());
-                  Iterator iIngresoEgreso=list.iterator();
-                  while(iIngresoEgreso.hasNext()){
-                     OPComprobantesIngresoEgreso opComprobantesIngresoEgreso=(OPComprobantesIngresoEgreso)iIngresoEgreso.next();
-                     opComprobantesIngresoEgreso.setEstadoRegistro("N");
-                     opComprobantesIngresoEgresoInterfaceLocal.update(opComprobantesIngresoEgreso);
-                  }
-                  //fvalle 19.11.2012 Cambio de Estado a 'Asignado' - Recibo de Cobranza
-                  List cbRecibosCobranzaList=cbRecibosCobranzaInterfaceLocal.findNumeroTransaccion(codigoEmpresa,movimiento.getNumeroTransaccion());
-                  if(cbRecibosCobranzaList.size()>0){
-                     CBRecibosCobranza cbRecibosCobranza=(CBRecibosCobranza)cbRecibosCobranzaList.get(0);
-                     cbRecibosCobranza.setEstadoRecibo("A");
-                     cbRecibosCobranza.setOpCabeceraTransaccionesAcumuladas(null);
-                     cbRecibosCobranzaInterfaceLocal.update(cbRecibosCobranza);
-                  }
-                  //hpajuelo 28.12.2011 Anulacion de los depositos en efectivo relacionados - Lavado de Activos
-                  LAOperacionDepositoEfectivo laOperacionDepositoEfectivo = 
-                     laOperacionesDepositosEfectivoFacadeInterfaceLocal.obtenerOperacion(movimiento.getNumeroTransaccion().toString());
-                  if(laOperacionDepositoEfectivo!=null){
-                     laOperacionDepositoEfectivo.setEstadoRegistro("N");
-                     laOperacionDepositoEfectivoInterfaceLocal.update(laOperacionDepositoEfectivo);
-                  }
-                  
-                  //hpajuelo 08.02.2012 Anulacion de movimientos de Remesas Don Prestamo relacionados
-                  List listaMovimientos = opMovimientosRemesasDonPrestamoInterfaceLocal.findByNumeroTransaccion(movimiento.getNumeroTransaccion());
-               if(listaMovimientos!=null && listaMovimientos.size()>0){
-                  OPMovimientosRemesasDonPrestamo opMovimientosRemesasDonPrestamo = (OPMovimientosRemesasDonPrestamo)listaMovimientos.get(0);
-                  
-                  if(opMovimientosRemesasDonPrestamo.getEstadoMovimiento().equals("R")){//Solo anular si esta en registrado
-                     opMovimientosRemesasDonPrestamo.setEstadoMovimiento("A");
-                     opMovimientosRemesasDonPrestamo.setEstadoRegistro("N");
-                     opMovimientosRemesasDonPrestamo.setUsuarioModificacion(usuario);
-                     opMovimientosRemesasDonPrestamo.setFechaModificacion(fechaOperacion);
-                     opMovimientosRemesasDonPrestamo.setTerminalModificacion(terminal);
-                     opMovimientosRemesasDonPrestamo.setIpModificacion(ip);
-                     opMovimientosRemesasDonPrestamoInterfaceLocal.update(opMovimientosRemesasDonPrestamo);
-                     
-                     String numeroRequerimiento = opMovimientosRemesasDonPrestamo.getNumeroRequerimiento();
-                     Double montoMovimiento = opMovimientosRemesasDonPrestamo.getMontoMovimiento();
-                     List listaRemesas = opRemesasDonPrestamoInterfaceLocal.findByNumeroRequerimiento(numeroRequerimiento);
-                     if(listaRemesas!=null && listaRemesas.size()>0){
-                        OPRemesasDonPrestamo opRemesasDonPrestamo = (OPRemesasDonPrestamo)listaRemesas.get(0);
-                        opRemesasDonPrestamo.setMontoMovimientos(
-                              new BigDecimal(opRemesasDonPrestamo.getMontoMovimientos()-montoMovimiento).setScale(2,BigDecimal.ROUND_HALF_EVEN).doubleValue());
-                        opRemesasDonPrestamo.setMontoSaldo(
-                              new BigDecimal(opRemesasDonPrestamo.getMontoIngreso()-opRemesasDonPrestamo.getMontoMovimientos()).setScale(2,BigDecimal.ROUND_HALF_EVEN).doubleValue());
-                        if(opRemesasDonPrestamo.getMontoMovimientos()==0){
-                           opRemesasDonPrestamo.setEstadoIngreso("I");
-                        }else{
-                           opRemesasDonPrestamo.setEstadoIngreso("P");
+                    }
+
+                    //hpajuelo 08.02.2012 Anulacion de movimientos de Remesas Don Prestamo relacionados
+                    List listaMovimientos = opMovimientosRemesasDonPrestamoInterfaceLocal.findByNumeroTransaccion(movimiento.getNumeroTransaccion());
+                    if (listaMovimientos != null && listaMovimientos.size() > 0) {
+                        OPMovimientosRemesasDonPrestamo opMovimientosRemesasDonPrestamo = (OPMovimientosRemesasDonPrestamo) listaMovimientos.get(0);
+
+                        if (opMovimientosRemesasDonPrestamo.getEstadoMovimiento().equals("R")) {//Solo anular si esta en registrado
+                            opMovimientosRemesasDonPrestamo.setEstadoMovimiento("A");
+                            opMovimientosRemesasDonPrestamo.setEstadoRegistro("N");
+                            opMovimientosRemesasDonPrestamo.setUsuarioModificacion(usuario);
+                            opMovimientosRemesasDonPrestamo.setFechaModificacion(fechaOperacion);
+                            opMovimientosRemesasDonPrestamo.setTerminalModificacion(terminal);
+                            opMovimientosRemesasDonPrestamo.setIpModificacion(ip);
+                            opMovimientosRemesasDonPrestamoInterfaceLocal.update(opMovimientosRemesasDonPrestamo);
+
+                            String numeroRequerimiento = opMovimientosRemesasDonPrestamo.getNumeroRequerimiento();
+                            Double montoMovimiento = opMovimientosRemesasDonPrestamo.getMontoMovimiento();
+                            List listaRemesas = opRemesasDonPrestamoInterfaceLocal.findByNumeroRequerimiento(numeroRequerimiento);
+                            if (listaRemesas != null && listaRemesas.size() > 0) {
+                                OPRemesasDonPrestamo opRemesasDonPrestamo = (OPRemesasDonPrestamo) listaRemesas.get(0);
+                                opRemesasDonPrestamo.setMontoMovimientos(new BigDecimal(opRemesasDonPrestamo.getMontoMovimientos() - montoMovimiento).setScale(2,
+                                                                                                                                                               BigDecimal.ROUND_HALF_EVEN).doubleValue());
+                                opRemesasDonPrestamo.setMontoSaldo(new BigDecimal(opRemesasDonPrestamo.getMontoIngreso() - opRemesasDonPrestamo.getMontoMovimientos()).setScale(2,
+                                                                                                                                                                                BigDecimal.ROUND_HALF_EVEN).doubleValue());
+                                if (opRemesasDonPrestamo.getMontoMovimientos() == 0) {
+                                    opRemesasDonPrestamo.setEstadoIngreso("I");
+                                } else {
+                                    opRemesasDonPrestamo.setEstadoIngreso("P");
+                                }
+                                opRemesasDonPrestamo.setUsuarioModificacion(usuario);
+                                opRemesasDonPrestamo.setFechaModificacion(fechaOperacion);
+                                opRemesasDonPrestamo.setTerminalModificacion(terminal);
+                                opRemesasDonPrestamo.setIpModificacion(ip);
+                                opRemesasDonPrestamoInterfaceLocal.update(opRemesasDonPrestamo);
+                            }
+                        } else {
+                            String errorCode = "1302";
+                            sessionContext.setRollbackOnly();
+                            cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
+                                                                                 movimiento.getDocumentoReferencia(),
+                                                                                 moduleName,
+                                                                                 errorCode,
+                                                                                 "");
+                            output.put("strError", errorCode);
+                            return output;
                         }
-                        opRemesasDonPrestamo.setUsuarioModificacion(usuario);
-                        opRemesasDonPrestamo.setFechaModificacion(fechaOperacion);
-                        opRemesasDonPrestamo.setTerminalModificacion(terminal);
-                        opRemesasDonPrestamo.setIpModificacion(ip);
-                        opRemesasDonPrestamoInterfaceLocal.update(opRemesasDonPrestamo);
-                     }
-                  }else{
-                     String errorCode = "1302";
-                     sessionContext.setRollbackOnly();
-                     cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,movimiento.getDocumentoReferencia(), moduleName, errorCode, "");
-                     output.put("strError", errorCode);
-                          return output;
-                  }
-               }
-               // Inicio [CC16-034] dlazo 24.06.2016
-               BeanCROrdenDesembolsoExterno beanCROrdenDesembolsoExterno;
-               beanCROrdenDesembolsoExterno = crOrdenDesembolsoExternoFacadeInterfaceLocal.buscarPorCorrelativoProceso(movimiento.getDocumentoReferencia(),
-                                                                                                                       ESTADO_APLICADO,
-                                                                                                                       beanParametrosAuditoria);
+                    }
+                    // Inicio [CC16-034] dlazo 24.06.2016
+                    BeanCROrdenDesembolsoExterno beanCROrdenDesembolsoExterno;
+                    beanCROrdenDesembolsoExterno = crOrdenDesembolsoExternoFacadeInterfaceLocal.buscarPorCorrelativoProceso(movimiento.getDocumentoReferencia(),
+                                                                                                                            ESTADO_APLICADO,
+                                                                                                                            beanParametrosAuditoria);
 
-               if (!_isEmpty(beanCROrdenDesembolsoExterno)) {
-                   String codigoError = NO_ERROR;
-                   codigoError = btPreLiquidacionFacadeInterfaceLocal.extornarLiquidacion(_toStr(movimiento.getNumeroTransaccion()),
-                                                                                          beanParametrosAuditoria);
+                    if (!_isEmpty(beanCROrdenDesembolsoExterno)) {
+                        String codigoError = NO_ERROR;
+                        codigoError = btPreLiquidacionFacadeInterfaceLocal.extornarLiquidacion(_toStr(movimiento.getNumeroTransaccion()),
+                                                                                               beanParametrosAuditoria);
 
-                   if (!_equiv(codigoError, NO_ERROR)) {
-                       sessionContext.setRollbackOnly();
-                       cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
-                                                                            movimiento.getDocumentoReferencia(),
-                                                                            moduleName,
-                                                                            codigoError,
-                                                                            CADENA_VACIA);
-                       output.put("strError", codigoError);
-                       return output;
-                   }
-                   Map<String, Object> mapRespuesta = new HashMap<String, Object>();
-                   mapRespuesta = crOrdenDesembolsoExternoFacadeInterfaceLocal.anularOperaciones(_toStr(beanCROrdenDesembolsoExterno.getNumeroDesembolso()),
-                                                                                                 beanParametrosAuditoria);
-                   codigoError = _toStr(mapRespuesta.get("codigoError"));
-                   if (!_equiv(codigoError, NO_ERROR)) {
-                       sessionContext.setRollbackOnly();
-                       cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
-                                                                            movimiento.getDocumentoReferencia(),
-                                                                            moduleName,
-                                                                            codigoError,
-                                                                            CADENA_VACIA);
-                       output.put("strError", codigoError);
-                       return output;
-                   }
-               }
-               // Fin [CC16-034] dlazo 24.06.2016
-               }
-         }
-         
-         //hpajuelo 21.06.2011 Se obtiene las operaciones relacionadas ordenadas por indicador operaciones principal
-         //List lstTransaccionesRelacionadas=opCabeceraTransaccionesAcumuladasInterfaceLocal.findByNumeroGrupoTransaccion(movimientoAcumulado.getNumeroGrupoTransaccion());
-         List lstTransaccionesRelacionadas=
-            opCabeceraTransaccionesAcumuladasInterfaceLocal.findByNumeroGrupoTransaccionOrdenOperacionPrincipal(movimientoAcumulado.getNumeroGrupoTransaccion());
-         
-         String numeroTransaccionAnulacion = cbCorrelativoInterfaceLocal.GenerarCorrelativo(codigoEmpresa, "OPMTRAD", 15, usuario, terminal, ip);
-         String numeroTransaccionAnulacion2="";
-         String numeroGrupoTransaccionAnulacion = numeroTransaccionAnulacion;
-         
-         String operacionFinanciera="050";
-         if("OP016".equals(movimientoAcumulado.getCodigoOperacion())){
-            operacionFinanciera="049";
-         }
-         if ("EG001".equals(movimientoAcumulado.getCodigoOperacion()) || "IG001".equals(movimientoAcumulado.getCodigoOperacion())){
-            operacionFinanciera="013";
-         }
-         //hpajuelo 08.06.2011 Anulacion de pagos administrativos con cuenta contable EXTORNO CONCEPTOS FUTUROS
-         if ("539".equals(movimientoAcumulado.getConceptoOperacionFinanciera())){
-            operacionFinanciera="540";
-         }
-         
-         for (int i = 0; i < lstTransaccionesRelacionadas.size(); i++) {
-            OPCabeceraTransaccionesAcumuladas opCabeceraTransaccionesAcumuladas=(OPCabeceraTransaccionesAcumuladas)lstTransaccionesRelacionadas.get(i);
-            List lstDetalle=opDetalleTransaccionesAcumuladasInterfaceLocal.findByNumeroTransaccion(opCabeceraTransaccionesAcumuladas.getNumeroTransaccion());
-            List lstSubConceptos=new ArrayList();
-            for (int j = 0; j < lstDetalle.size(); j++) {
-               OPDetalleTransaccionesAcumuladas opDetalleTransaccionesAcumuladas=(OPDetalleTransaccionesAcumuladas)lstDetalle.get(j);
-               DetalleBean detalleBean=new DetalleBean();
-               detalleBean.setPosicion(j);
-               detalleBean.setCodigoConcepto(opDetalleTransaccionesAcumuladas.getId().getCodigoConceptoOperacion());
-               detalleBean.setCodigoSubConcepto(opDetalleTransaccionesAcumuladas.getId().getCodigoSubConceptoOperacion());
-               detalleBean.setMonto(opDetalleTransaccionesAcumuladas.getMontoDetalle());
-               lstSubConceptos.add(detalleBean);
-            }
-            if(i==0){
-               numeroTransaccionAnulacion2=numeroTransaccionAnulacion;
-            }else{
-               numeroTransaccionAnulacion2 = cbCorrelativoInterfaceLocal.GenerarCorrelativo(codigoEmpresa, "OPMTRAD", 15, usuario, terminal, ip);
-            }
-            //generamos la transaccion de anulacion
-            //hpajuelo 17.03.2011 entidadmanejadoradevalores null, codigo agencia 001, codigocanal 002, transaccion de origen anulada, estado y tipo regulatizacion
-            //hpajuelo 31.08.2011 Se obtiene entidadRecaudadora para la regularizacion de operaciones de recaudacion externa
-            //hpajuelo 05.09.2011 Se obtiene el subconcepto relacionado a la entidad recaudadora para anulaciones
-            String entidadRecaudadora = null;
-            String subConceptoAnulacionRecaudoExterno = "";
-            if(opCabeceraTransaccionesAcumuladas.getOpCanalOperacionRecaudacionExterna()!=null){
-               entidadRecaudadora = opCabeceraTransaccionesAcumuladas.getOpCanalOperacionRecaudacionExterna().getEntidadRecaudacionExterna();
-               if(entidadRecaudadora!=null && !entidadRecaudadora.equals("")){
-                  subConceptoAnulacionRecaudoExterno = 
-                     opEntidadRecaudadoraConceptoInterfaceLocal.obtenerSubConcepto(entidadRecaudadora);
-               }
-            }
-            //hpajuelo 19.01.2012 Anulacion Ingresos TFSoluciones con Ajuste, operacionFinanciera 550
-            if(operacionFinanciera.equals("013") && 
-                  opCabeceraTransaccionesAcumuladas.getCodigoOperacion()!=null && 
-                        opCabeceraTransaccionesAcumuladas.getCodigoOperacion().equals("OP106")){
-               operacionFinanciera = "550";
-            }
-            
-            //mnieves 09.02.2012
-            if ("553".equals(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera())){
-               //mnieves 17.02.2012
-               operacionFinanciera="555";
-            }
-            
-            // ini:drequejo 20.04.2012
-            if ("OP112".equals(opCabeceraTransaccionesAcumuladas.getCodigoOperacion())
-               || "OP111".equals(opCabeceraTransaccionesAcumuladas.getCodigoOperacion())) {
-               operacionFinanciera = "050";
-            }
-            // fin:drequejo
-            
-             // Inicio jventura 09.10.2014: Ticket #8577 Anular transaccion
-            if (ConstantesContabilidad.CONCEPTO_DE_OPERACION_FINANCIERA_PAGO_SEGUROS.equals(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera())){
-                // [Ticket#9425] esalazar 07.09.2016
-                operacionFinanciera=ConstantesContabilidad.CONCEPTO_OPERACION_FINANCIERA_ANULACION_DE_DEPOSITO_GARANTIA_CREDITOS;
-            }
-            
-            if (ConstantesContabilidad.CONCEPTO_DE_OPERACION_FINANCIERA_DEPOSITO_GARANTIA_CREDITOS.equals(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera())){
-                // [Ticket#9425] esalazar 07.09.2016
-                operacionFinanciera=ConstantesContabilidad.CONCEPTO_OPERACION_FINANCIERA_ANULACION_DE_PAGO_SEGUROS;
-            }
-            
-            if (ConstantesContabilidad.CONCEPTO_DE_OPERACION_ITF.equals(opCabeceraTransaccionesAcumuladas.getCodigoOperacion())){
-               operacionFinanciera=ConstantesContabilidad.CONCEPTO_OPERACION_FINANCIERA_PAGO_CREDITOS_CUOTAS;
-            }
-         
-            if (ConstantesContabilidad.CONCEPTO_OPERACION_AJUSTE_MONETARIO.equals(opCabeceraTransaccionesAcumuladas.getCodigoOperacion())){
-                  operacionFinanciera=ConstantesContabilidad.CONCEPTO_OPERACION_FINANCIERA_PAGO_CREDITOS_CUOTAS;
-               }
-            
-            if (ConstantesContabilidad.CONCEPTO_OPERACION_CAPITALIZACION_INTERES.equals(opCabeceraTransaccionesAcumuladas.getCodigoOperacion())){
-                  operacionFinanciera=ConstantesContabilidad.CONCEPTO_OPERACION_FINANCIERA_PAGO_CREDITOS_CUOTAS;
-               }
-            
-            if (ConstantesContabilidad.CONCEPTO_OPERACION_CAPITALIZACION_CAPITAL.equals(opCabeceraTransaccionesAcumuladas.getCodigoOperacion())){
-                  operacionFinanciera=ConstantesContabilidad.CONCEPTO_OPERACION_FINANCIERA_PAGO_CREDITOS_CUOTAS;
-               }
-            if (ConstantesContabilidad.OPERACION_FINANCIERA_PAGO_CARGO_A_CUENTA.equals(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera())){
-                operacionFinanciera=ConstantesContabilidad.OPERACION_FINANCIERA_ANULACION_PAGO_CARGO_A_CUENTA;
-             }
-            
-            //Inicio [Req.15-030] fvalle 07.07.2015 
-            if (equiv(opCabeceraTransaccionesAcumuladas.getOpCanalesOperacion().getCodigoCanal(),
-                      CANAL_OPERACION_OPERACION_ADMINISTRATIVA)) {
-               if (equiv(opCabeceraTransaccionesAcumuladas.getCodigoOperacion(), CODIGO_OPERACION_PAGO_CARGO_A_CUENTA) 
-                        && equiv(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera(),CODIGO_OPERACION_FINANCIERA_PAGO_CARGO_A_CUENTA) 
-                        && equiv(opCabeceraTransaccionesAcumuladas.getIndicadorMovimientoDinero(),TIPO_MOVIMIENTO_NOTA_CARGO)) {
-                  operacionFinanciera = ConstantesContabilidad.OPERACION_FINANCIERA_ANULACION_RETIRO_MANUAL_CARGO_CUENTA;
-               }
-               if (equiv(opCabeceraTransaccionesAcumuladas.getCodigoOperacion(), CODIGO_OPERACION_PAGO_CREDITO) 
-                        && equiv(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera(),CONCEPTO_OPERACION_FINANCIERA_PAGO_CREDITOS_CUOTAS) 
-                        && equiv(opCabeceraTransaccionesAcumuladas.getIndicadorMovimientoDinero(),TIPO_MOVIMIENTO_OPERACIONES_CARGO_ACUENTA_AHORROS)) {
-                  operacionFinanciera = ConstantesContabilidad.OPERACION_FINANCIERA_ANULACION_RETIRO_MANUAL_CARGO_CUENTA;
-               }
-               if (equiv(opCabeceraTransaccionesAcumuladas.getCodigoOperacion(), COD_OPERACION_ITF) 
-                        && equiv(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera(),CONCEPTO_OPERACION_FINANCIERA_PAGO_CREDITOS_CUOTAS) 
-                        && equiv(opCabeceraTransaccionesAcumuladas.getIndicadorMovimientoDinero(),TIPO_MOVIMIENTO_OPERACIONES_CARGO_ACUENTA_AHORROS)) {
-                  operacionFinanciera = ConstantesContabilidad.OPERACION_FINANCIERA_ANULACION_RETIRO_MANUAL_CARGO_CUENTA;
-               }
-            }
-            //Fin [Req.15-030]
-               
-            // Fin jventura 09.10.2014: Ticket #8577 Anular transaccion
-         
-            //fvalle 23.10.2013 Ticket 7101
-            String columna28 = opCabeceraTransaccionesAcumuladas.getColumna28();
-
-            if( movimientoAcumulado!=null && "OP010".equals(movimientoAcumulado.getCodigoOperacion()) ){
-
-               if(  opCabeceraTransaccionesAcumuladas.getColumna28()!=null && !"".equals(opCabeceraTransaccionesAcumuladas.getColumna28()) ){
-                  columna28 = opCabeceraTransaccionesAcumuladas.getColumna28();
-                 }else{
-                  columna28 = crProductoNivelGrupoInterfaceLocal.findGrupoByNumeroCredito(opCabeceraTransaccionesAcumuladas.getDocumentoReferencia(), codigoEmpresa);
+                        if (!_equiv(codigoError, NO_ERROR)) {
+                            sessionContext.setRollbackOnly();
+                            cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
+                                                                                 movimiento.getDocumentoReferencia(),
+                                                                                 moduleName,
+                                                                                 codigoError,
+                                                                                 CADENA_VACIA);
+                            output.put("strError", codigoError);
+                            return output;
+                        }
+                        Map<String, Object> mapRespuesta = new HashMap<String, Object>();
+                        mapRespuesta = crOrdenDesembolsoExternoFacadeInterfaceLocal.anularOperaciones(_toStr(beanCROrdenDesembolsoExterno.getNumeroDesembolso()),
+                                                                                                      beanParametrosAuditoria);
+                        codigoError = _toStr(mapRespuesta.get("codigoError"));
+                        if (!_equiv(codigoError, NO_ERROR)) {
+                            sessionContext.setRollbackOnly();
+                            cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
+                                                                                 movimiento.getDocumentoReferencia(),
+                                                                                 moduleName,
+                                                                                 codigoError,
+                                                                                 CADENA_VACIA);
+                            output.put("strError", codigoError);
+                            return output;
+                        }
+                    }
+                    // Fin [CC16-034] dlazo 24.06.2016
                 }
-             }else{
-               columna28 = opCabeceraTransaccionesAcumuladas.getColumna28();
-             }
+            }
+
+            //hpajuelo 21.06.2011 Se obtiene las operaciones relacionadas ordenadas por indicador operaciones principal
+            //List lstTransaccionesRelacionadas=opCabeceraTransaccionesAcumuladasInterfaceLocal.findByNumeroGrupoTransaccion(movimientoAcumulado.getNumeroGrupoTransaccion());
+            List lstTransaccionesRelacionadas = opCabeceraTransaccionesAcumuladasInterfaceLocal.findByNumeroGrupoTransaccionOrdenOperacionPrincipal(movimientoAcumulado.getNumeroGrupoTransaccion());
+
+            //Inicio [Req.17-033] acnunez 20.06.2017
+            for (int i = 0; i < lstTransaccionesRelacionadas.size(); i++) {
+                OPCabeceraTransaccionesAcumuladas opCabeceraTransaccionesAcumuladas = (OPCabeceraTransaccionesAcumuladas) lstTransaccionesRelacionadas.get(i);
+                
+                if ((_equiv(opCabeceraTransaccionesAcumuladas.getCodigoOperacion(),Constante.CODIGO_OPERACION_PAGO_CARGO_A_CUENTA) && 
+                    (_equiv(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera(),Constante.CODIGO_OPERACION_FINANCIERA_PAGO_CARGO_A_CUENTA))) || 
+                    (_equiv(opCabeceraTransaccionesAcumuladas.getCodigoOperacion(),Constante.COD_OPERACION_ITF) && 
+                    (_equiv(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera(),Constante.CODIGO_OPERACION_FINANCIERA_PAGO_CARGO_A_CUENTA)))) {
+
+                    montoMovimientoConITF = montoMovimientoConITF + opCabeceraTransaccionesAcumuladas.getMontoMovimiento();
+                }
+            }
+            //Fin [Req.17-033]
             
-            Map mapPago = generarTransaccionFinanciera(numeroTransaccionAnulacion2, 
-                   numeroGrupoTransaccionAnulacion, 
-                   null, 
-                   operacionFinanciera, 
-                   opCabeceraTransaccionesAcumuladas.getCodigoOperacion(), 
-                   opCabeceraTransaccionesAcumuladas.getIndicadorOperacion(),//indicadorTransaccionPrincipal, 
-                   opCabeceraTransaccionesAcumuladas.getIndicadorAplicaCaja(),//indicadorAplicacionCaja, 
-                   //opCabeceraTransaccionesAcumuladas.getOpCanalesOperacion()!=null?opCabeceraTransaccionesAcumuladas.getOpCanalesOperacion().getCodigoCanal():null,//codigoCanalOperacion,
-                   "002",
-                   opCabeceraTransaccionesAcumuladas.getCodigoEntidadCanalOperaciones(),//codigoEntidadCanalOperacion, 
-                   opCabeceraTransaccionesAcumuladas.getDescripcionEntidadCanalOperaciones(),//descripcionEntidadCanalOperacion, 
-                   //hpajuelo 31.08.2011 Se envia entidadRecaudadora
-                   //null,//entidadRecaudadora,
-                   entidadRecaudadora,
-                   opCabeceraTransaccionesAcumuladas.getCodigoEmpresa(), 
-                   //opCabeceraTransaccionesAcumuladas.getCodigoAgencia(),
-                   codigoAgencia,
-                   opCabeceraTransaccionesAcumuladas.getAgenciaOrigen(),//codigoAgenciaOrigen, 
-                   opCabeceraTransaccionesAcumuladas.getAgenciaCartera(),//codigoAgenciaCartera, 
-                   usuario, 
-                   //opCabeceraTransaccionesAcumuladas.getOpEntidadesManejadorasValores()!=null?opCabeceraTransaccionesAcumuladas.getOpEntidadesManejadorasValores().getEntidadManejadoraValores():null,
-                   null,
-                   new Date(fechaOperacion.getTime()), 
-                   f.obtenerHora(), 
-                   "S",//estadoRegistro, 
-                   opCabeceraTransaccionesAcumuladas.getFechaValuta()!=null?new Date(opCabeceraTransaccionesAcumuladas.getFechaValuta().getTime()):new Date(fechaOperacion.getTime()),//fechaValuta, 
-                   null,//fechaAnulacionTransaccion, 
-                   null,//usuarioAnuloTransaccion, 
-                   null,//observacionAnulacion, 
-                   //opCabeceraTransaccionesAcumuladas.getOperacionRelacionada()!=null?opCabeceraTransaccionesAcumuladas.getOperacionRelacionada().toString():"",//numeroTransaccionAnulada,
-                   opCabeceraTransaccionesAcumuladas.getNumeroTransaccion()!=null?opCabeceraTransaccionesAcumuladas.getNumeroTransaccion().toString():"",
-                   null,//origenRegularizacion, 
-                   "A",//tipoRegularizacion, 
-                   opCabeceraTransaccionesAcumuladas.getOpMotivoReguLarizacion()!=null?opCabeceraTransaccionesAcumuladas.getOpMotivoReguLarizacion().getMotivoRegularizacion():null,//motivoRegularizacion, 
-                   opCabeceraTransaccionesAcumuladas.getObservacionRegularizacion(),//observacionRegularizacion, 
-                   opCabeceraTransaccionesAcumuladas.getIndicadorIngresoEgreso(), 
-                   opCabeceraTransaccionesAcumuladas.getCodigoMoneda(), 
-                   opCabeceraTransaccionesAcumuladas.getMontoMovimiento(), 
-                   opCabeceraTransaccionesAcumuladas.getTipoCambio(), 
-                   opCabeceraTransaccionesAcumuladas.getIndicadorMovimientoDinero(),//tipoMovimientoOperaciones, 
-                   opCabeceraTransaccionesAcumuladas.getCodigoCuentaBancaria(),//codigoBanco, 
-                   opCabeceraTransaccionesAcumuladas.getNumeroLargoCuentaBancaria(),//numeroCuentaBancaria, 
-                   opCabeceraTransaccionesAcumuladas.getNumeroCorrelativoMovimiento(),//numeroCorrelativoCuentaBancaria, 
-                   opCabeceraTransaccionesAcumuladas.getNumeroReferenciaDocumento(),//numeroReferencia, 
-                   //hpajuelo 05.09.2011 Si es una anulacion de recaudacion externa se envia el subconcepto de anulacion
-                   //opCabeceraTransaccionesAcumuladas.getSubConceptoOperacion(),
-                   !subConceptoAnulacionRecaudoExterno.equals("")?subConceptoAnulacionRecaudoExterno:opCabeceraTransaccionesAcumuladas.getSubConceptoOperacion(),
-                   opCabeceraTransaccionesAcumuladas.getDocumentoReferencia(), 
-                   "P",//tipoDocumentoReferencia, 
-                   opCabeceraTransaccionesAcumuladas.getCodigoPersona(), 
-                   opCabeceraTransaccionesAcumuladas.getNombreReferencia(), 
-                   null,//descripcionLargaoGlosa, 
-                   null,//paisOrigenTransaccion, 
-                   null,//paisDestinoTransaccion, 
-                   null,//ubigeoOrigenTransaccion, 
-                   null,//ubigeoDestinoTransaccion, 
-                   null,//indicadorNacionalInternacional, 
-                   null,//empresaOrigen, 
-                   null,//empresaDestino, 
-                   opCabeceraTransaccionesAcumuladas.getColumna01(),//columna01, 
-                   opCabeceraTransaccionesAcumuladas.getColumna02(),//columna02, 
-                   opCabeceraTransaccionesAcumuladas.getColumna03(),//columna03, 
-                   opCabeceraTransaccionesAcumuladas.getColumna04(),//columna04, 
-                   opCabeceraTransaccionesAcumuladas.getColumna05(),//columna05, 
-                   opCabeceraTransaccionesAcumuladas.getColumna06(),//columna06, 
-                   opCabeceraTransaccionesAcumuladas.getColumna07(),//columna07, 
-                   opCabeceraTransaccionesAcumuladas.getColumna08(),//columna08, 
-                   opCabeceraTransaccionesAcumuladas.getColumna09(),//columna09, 
-                   opCabeceraTransaccionesAcumuladas.getColumna10(),//columna10, 
-                   opCabeceraTransaccionesAcumuladas.getColumna11(),//columna11, 
-                   opCabeceraTransaccionesAcumuladas.getColumna12(),//columna12, 
-                   opCabeceraTransaccionesAcumuladas.getColumna13(),//columna13, 
-                   opCabeceraTransaccionesAcumuladas.getColumna14(),//columna14, 
-                   opCabeceraTransaccionesAcumuladas.getColumna15(),//columna15, 
-                   opCabeceraTransaccionesAcumuladas.getColumna16(),//columna16, 
-                   opCabeceraTransaccionesAcumuladas.getColumna17(),//columna17, 
-                   opCabeceraTransaccionesAcumuladas.getColumna18(),//columna18, 
-                   opCabeceraTransaccionesAcumuladas.getColumna19(),//columna19, 
-                   opCabeceraTransaccionesAcumuladas.getColumna20(),//columna20, 
-                   opCabeceraTransaccionesAcumuladas.getColumna21(),//columna21, 
-                   opCabeceraTransaccionesAcumuladas.getColumna22(),//columna22, 
-                   opCabeceraTransaccionesAcumuladas.getColumna23(),//columna23, 
-                   opCabeceraTransaccionesAcumuladas.getColumna24(),//columna24, 
-                   opCabeceraTransaccionesAcumuladas.getColumna25(),//columna25, 
-                   opCabeceraTransaccionesAcumuladas.getColumna26(),//columna26, 
-                   opCabeceraTransaccionesAcumuladas.getColumna27(),//columna27, 
-                   columna28,//fvalle 23.10.2013 Ticket 7101 // opCabeceraTransaccionesAcumuladas.getColumna28()
-                   opCabeceraTransaccionesAcumuladas.getColumna29(),//columna29, 
-                   opCabeceraTransaccionesAcumuladas.getColumna30(),//columna30, 
-                   lstSubConceptos, 
-                   "N", 
-                   "N", 
-                   "N", 
-                   "N", 
-                   "A",//indicadoRegularizacion, 
-                   usuario, 
-                   terminal, 
-                   ip);
-            
-            String errorCode=mapPago.get("strError").toString();
-            if(!errorCode.equals(NO_ERROR)){
-               sessionContext.setRollbackOnly();
-               cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,opCabeceraTransaccionesAcumuladas.getDocumentoReferencia(), moduleName, errorCode, "");
-               output.put("strError", errorCode);
+            String numeroTransaccionAnulacion = cbCorrelativoInterfaceLocal.GenerarCorrelativo(codigoEmpresa,
+                                                                                               "OPMTRAD",
+                                                                                               15,
+                                                                                               usuario,
+                                                                                               terminal,
+                                                                                               ip);
+            String numeroTransaccionAnulacion2 = "";
+            String numeroGrupoTransaccionAnulacion = numeroTransaccionAnulacion;
+
+            String operacionFinanciera = "050";
+            if ("OP016".equals(movimientoAcumulado.getCodigoOperacion())) {
+                operacionFinanciera = "049";
+            }
+            if ("EG001".equals(movimientoAcumulado.getCodigoOperacion()) || "IG001".equals(movimientoAcumulado.getCodigoOperacion())) {
+                operacionFinanciera = "013";
+            }
+            //hpajuelo 08.06.2011 Anulacion de pagos administrativos con cuenta contable EXTORNO CONCEPTOS FUTUROS
+            if ("539".equals(movimientoAcumulado.getConceptoOperacionFinanciera())) {
+                operacionFinanciera = "540";
+            }
+
+            for (int i = 0; i < lstTransaccionesRelacionadas.size(); i++) {
+                OPCabeceraTransaccionesAcumuladas opCabeceraTransaccionesAcumuladas = (OPCabeceraTransaccionesAcumuladas) lstTransaccionesRelacionadas.get(i);
+                List lstDetalle = opDetalleTransaccionesAcumuladasInterfaceLocal.findByNumeroTransaccion(opCabeceraTransaccionesAcumuladas.getNumeroTransaccion());
+                List lstSubConceptos = new ArrayList();
+                for (int j = 0; j < lstDetalle.size(); j++) {
+                    OPDetalleTransaccionesAcumuladas opDetalleTransaccionesAcumuladas = (OPDetalleTransaccionesAcumuladas) lstDetalle.get(j);
+                    DetalleBean detalleBean = new DetalleBean();
+                    detalleBean.setPosicion(j);
+                    detalleBean.setCodigoConcepto(opDetalleTransaccionesAcumuladas.getId().getCodigoConceptoOperacion());
+                    detalleBean.setCodigoSubConcepto(opDetalleTransaccionesAcumuladas.getId().getCodigoSubConceptoOperacion());
+                    detalleBean.setMonto(opDetalleTransaccionesAcumuladas.getMontoDetalle());
+                    lstSubConceptos.add(detalleBean);
+                }
+                if (i == 0) {
+                    numeroTransaccionAnulacion2 = numeroTransaccionAnulacion;
+                } else {
+                    numeroTransaccionAnulacion2 = cbCorrelativoInterfaceLocal.GenerarCorrelativo(codigoEmpresa,
+                                                                                                 "OPMTRAD",
+                                                                                                 15,
+                                                                                                 usuario,
+                                                                                                 terminal,
+                                                                                                 ip);
+                }
+                //generamos la transaccion de anulacion
+                //hpajuelo 17.03.2011 entidadmanejadoradevalores null, codigo agencia 001, codigocanal 002, transaccion de origen anulada, estado y tipo regulatizacion
+                //hpajuelo 31.08.2011 Se obtiene entidadRecaudadora para la regularizacion de operaciones de recaudacion externa
+                //hpajuelo 05.09.2011 Se obtiene el subconcepto relacionado a la entidad recaudadora para anulaciones
+                String entidadRecaudadora = null;
+                String subConceptoAnulacionRecaudoExterno = "";
+                if (opCabeceraTransaccionesAcumuladas.getOpCanalOperacionRecaudacionExterna() != null) {
+                    entidadRecaudadora = opCabeceraTransaccionesAcumuladas.getOpCanalOperacionRecaudacionExterna().getEntidadRecaudacionExterna();
+                    if (entidadRecaudadora != null && !entidadRecaudadora.equals("")) {
+                        subConceptoAnulacionRecaudoExterno = opEntidadRecaudadoraConceptoInterfaceLocal.obtenerSubConcepto(entidadRecaudadora);
+                    }
+                }
+                //hpajuelo 19.01.2012 Anulacion Ingresos TFSoluciones con Ajuste, operacionFinanciera 550
+                if (operacionFinanciera.equals("013") && opCabeceraTransaccionesAcumuladas.getCodigoOperacion() != null && opCabeceraTransaccionesAcumuladas.getCodigoOperacion().equals("OP106")) {
+                    operacionFinanciera = "550";
+                }
+
+                //mnieves 09.02.2012
+                if ("553".equals(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera())) {
+                    //mnieves 17.02.2012
+                    operacionFinanciera = "555";
+                }
+
+                // ini:drequejo 20.04.2012
+                if ("OP112".equals(opCabeceraTransaccionesAcumuladas.getCodigoOperacion()) || "OP111".equals(opCabeceraTransaccionesAcumuladas.getCodigoOperacion())) {
+                    operacionFinanciera = "050";
+                }
+                // fin:drequejo
+
+                // Inicio jventura 09.10.2014: Ticket #8577 Anular transaccion
+                if (ConstantesContabilidad.CONCEPTO_DE_OPERACION_FINANCIERA_PAGO_SEGUROS.equals(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera())) {
+                    // [Ticket#9425] esalazar 07.09.2016
+                    operacionFinanciera = ConstantesContabilidad.CONCEPTO_OPERACION_FINANCIERA_ANULACION_DE_DEPOSITO_GARANTIA_CREDITOS;
+                }
+
+                if (ConstantesContabilidad.CONCEPTO_DE_OPERACION_FINANCIERA_DEPOSITO_GARANTIA_CREDITOS.equals(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera())) {
+                    // [Ticket#9425] esalazar 07.09.2016
+                    operacionFinanciera = ConstantesContabilidad.CONCEPTO_OPERACION_FINANCIERA_ANULACION_DE_PAGO_SEGUROS;
+                }
+
+                if (ConstantesContabilidad.CONCEPTO_DE_OPERACION_ITF.equals(opCabeceraTransaccionesAcumuladas.getCodigoOperacion())) {
+                    operacionFinanciera = ConstantesContabilidad.CONCEPTO_OPERACION_FINANCIERA_PAGO_CREDITOS_CUOTAS;
+                }
+
+                if (ConstantesContabilidad.CONCEPTO_OPERACION_AJUSTE_MONETARIO.equals(opCabeceraTransaccionesAcumuladas.getCodigoOperacion())) {
+                    operacionFinanciera = ConstantesContabilidad.CONCEPTO_OPERACION_FINANCIERA_PAGO_CREDITOS_CUOTAS;
+                }
+
+                if (ConstantesContabilidad.CONCEPTO_OPERACION_CAPITALIZACION_INTERES.equals(opCabeceraTransaccionesAcumuladas.getCodigoOperacion())) {
+                    operacionFinanciera = ConstantesContabilidad.CONCEPTO_OPERACION_FINANCIERA_PAGO_CREDITOS_CUOTAS;
+                }
+
+                if (ConstantesContabilidad.CONCEPTO_OPERACION_CAPITALIZACION_CAPITAL.equals(opCabeceraTransaccionesAcumuladas.getCodigoOperacion())) {
+                    operacionFinanciera = ConstantesContabilidad.CONCEPTO_OPERACION_FINANCIERA_PAGO_CREDITOS_CUOTAS;
+                }
+                if (ConstantesContabilidad.OPERACION_FINANCIERA_PAGO_CARGO_A_CUENTA.equals(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera())) {
+                    operacionFinanciera = ConstantesContabilidad.OPERACION_FINANCIERA_ANULACION_PAGO_CARGO_A_CUENTA;
+                }
+
+                //Inicio [Req.15-030] fvalle 07.07.2015 
+                if (equiv(opCabeceraTransaccionesAcumuladas.getOpCanalesOperacion().getCodigoCanal(),
+                          CANAL_OPERACION_OPERACION_ADMINISTRATIVA)) {
+                    if (equiv(opCabeceraTransaccionesAcumuladas.getCodigoOperacion(),
+                              CODIGO_OPERACION_PAGO_CARGO_A_CUENTA) && equiv(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera(),
+                                                                             CODIGO_OPERACION_FINANCIERA_PAGO_CARGO_A_CUENTA) && equiv(opCabeceraTransaccionesAcumuladas.getIndicadorMovimientoDinero(),
+                                                                                                                                       TIPO_MOVIMIENTO_NOTA_CARGO)) {
+                        operacionFinanciera = ConstantesContabilidad.OPERACION_FINANCIERA_ANULACION_RETIRO_MANUAL_CARGO_CUENTA;
+                    }
+                    if (equiv(opCabeceraTransaccionesAcumuladas.getCodigoOperacion(),
+                              CODIGO_OPERACION_PAGO_CREDITO) && equiv(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera(),
+                                                                      CONCEPTO_OPERACION_FINANCIERA_PAGO_CREDITOS_CUOTAS) && equiv(opCabeceraTransaccionesAcumuladas.getIndicadorMovimientoDinero(),
+                                                                                                                                   TIPO_MOVIMIENTO_OPERACIONES_CARGO_ACUENTA_AHORROS)) {
+                        operacionFinanciera = ConstantesContabilidad.OPERACION_FINANCIERA_ANULACION_RETIRO_MANUAL_CARGO_CUENTA;
+                    }
+                    if (equiv(opCabeceraTransaccionesAcumuladas.getCodigoOperacion(),
+                              COD_OPERACION_ITF) && equiv(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera(),
+                                                          CONCEPTO_OPERACION_FINANCIERA_PAGO_CREDITOS_CUOTAS) && equiv(opCabeceraTransaccionesAcumuladas.getIndicadorMovimientoDinero(),
+                                                                                                                       TIPO_MOVIMIENTO_OPERACIONES_CARGO_ACUENTA_AHORROS)) {
+                        operacionFinanciera = ConstantesContabilidad.OPERACION_FINANCIERA_ANULACION_RETIRO_MANUAL_CARGO_CUENTA;
+                    }
+                }
+                //Fin [Req.15-030]
+
+                // Fin jventura 09.10.2014: Ticket #8577 Anular transaccion
+
+                //fvalle 23.10.2013 Ticket 7101
+                String columna28 = opCabeceraTransaccionesAcumuladas.getColumna28();
+
+                if (movimientoAcumulado != null && "OP010".equals(movimientoAcumulado.getCodigoOperacion())) {
+
+                    if (opCabeceraTransaccionesAcumuladas.getColumna28() != null && !"".equals(opCabeceraTransaccionesAcumuladas.getColumna28())) {
+                        columna28 = opCabeceraTransaccionesAcumuladas.getColumna28();
+                    } else {
+                        columna28 = crProductoNivelGrupoInterfaceLocal.findGrupoByNumeroCredito(opCabeceraTransaccionesAcumuladas.getDocumentoReferencia(),
+                                                                                                codigoEmpresa);
+                    }
+                } else {
+                    columna28 = opCabeceraTransaccionesAcumuladas.getColumna28();
+                }
+
+                Map mapPago = generarTransaccionFinanciera(numeroTransaccionAnulacion2,
+                                                           numeroGrupoTransaccionAnulacion,
+                                                           null,
+                                                           operacionFinanciera,
+                                                           opCabeceraTransaccionesAcumuladas.getCodigoOperacion(),
+                                                           opCabeceraTransaccionesAcumuladas.getIndicadorOperacion(), //indicadorTransaccionPrincipal, 
+                                                           opCabeceraTransaccionesAcumuladas.getIndicadorAplicaCaja(), //indicadorAplicacionCaja, 
+                                                           //opCabeceraTransaccionesAcumuladas.getOpCanalesOperacion()!=null?opCabeceraTransaccionesAcumuladas.getOpCanalesOperacion().getCodigoCanal():null,//codigoCanalOperacion,
+                                                           "002",
+                                                           opCabeceraTransaccionesAcumuladas.getCodigoEntidadCanalOperaciones(), //codigoEntidadCanalOperacion, 
+                                                           opCabeceraTransaccionesAcumuladas.getDescripcionEntidadCanalOperaciones(), //descripcionEntidadCanalOperacion, 
+                                                           //hpajuelo 31.08.2011 Se envia entidadRecaudadora
+                                                           //null,//entidadRecaudadora,
+                                                           entidadRecaudadora,
+                                                           opCabeceraTransaccionesAcumuladas.getCodigoEmpresa(),
+                                                           //opCabeceraTransaccionesAcumuladas.getCodigoAgencia(),
+                                                           codigoAgencia,
+                                                           opCabeceraTransaccionesAcumuladas.getAgenciaOrigen(), //codigoAgenciaOrigen, 
+                                                           opCabeceraTransaccionesAcumuladas.getAgenciaCartera(), //codigoAgenciaCartera, 
+                                                           usuario,
+                                                           //opCabeceraTransaccionesAcumuladas.getOpEntidadesManejadorasValores()!=null?opCabeceraTransaccionesAcumuladas.getOpEntidadesManejadorasValores().getEntidadManejadoraValores():null,
+                                                           null,
+                                                           new Date(fechaOperacion.getTime()),
+                                                           f.obtenerHora(),
+                                                           "S", //estadoRegistro, 
+                                                           opCabeceraTransaccionesAcumuladas.getFechaValuta() != null ? new Date(opCabeceraTransaccionesAcumuladas.getFechaValuta().getTime()) : new Date(fechaOperacion.getTime()), //fechaValuta, 
+                                                           null, //fechaAnulacionTransaccion, 
+                                                           null, //usuarioAnuloTransaccion, 
+                                                           null, //observacionAnulacion, 
+                                                           //opCabeceraTransaccionesAcumuladas.getOperacionRelacionada()!=null?opCabeceraTransaccionesAcumuladas.getOperacionRelacionada().toString():"",//numeroTransaccionAnulada,
+                                                           opCabeceraTransaccionesAcumuladas.getNumeroTransaccion() != null ? opCabeceraTransaccionesAcumuladas.getNumeroTransaccion().toString() : "",
+                                                           null, //origenRegularizacion, 
+                                                           "A", //tipoRegularizacion, 
+                                                           opCabeceraTransaccionesAcumuladas.getOpMotivoReguLarizacion() != null ? opCabeceraTransaccionesAcumuladas.getOpMotivoReguLarizacion().getMotivoRegularizacion() : null, //motivoRegularizacion, 
+                                                           opCabeceraTransaccionesAcumuladas.getObservacionRegularizacion(), //observacionRegularizacion, 
+                                                           opCabeceraTransaccionesAcumuladas.getIndicadorIngresoEgreso(),
+                                                           opCabeceraTransaccionesAcumuladas.getCodigoMoneda(),
+                                                           opCabeceraTransaccionesAcumuladas.getMontoMovimiento(),
+                                                           opCabeceraTransaccionesAcumuladas.getTipoCambio(),
+                                                           opCabeceraTransaccionesAcumuladas.getIndicadorMovimientoDinero(), //tipoMovimientoOperaciones, 
+                                                           opCabeceraTransaccionesAcumuladas.getCodigoCuentaBancaria(), //codigoBanco, 
+                                                           opCabeceraTransaccionesAcumuladas.getNumeroLargoCuentaBancaria(), //numeroCuentaBancaria, 
+                                                           opCabeceraTransaccionesAcumuladas.getNumeroCorrelativoMovimiento(), //numeroCorrelativoCuentaBancaria, 
+                                                           opCabeceraTransaccionesAcumuladas.getNumeroReferenciaDocumento(), //numeroReferencia, 
+                                                           //hpajuelo 05.09.2011 Si es una anulacion de recaudacion externa se envia el subconcepto de anulacion
+                                                           //opCabeceraTransaccionesAcumuladas.getSubConceptoOperacion(),
+                                                           !subConceptoAnulacionRecaudoExterno.equals("") ? subConceptoAnulacionRecaudoExterno : opCabeceraTransaccionesAcumuladas.getSubConceptoOperacion(),
+                                                           opCabeceraTransaccionesAcumuladas.getDocumentoReferencia(),
+                                                           "P", //tipoDocumentoReferencia, 
+                                                           opCabeceraTransaccionesAcumuladas.getCodigoPersona(),
+                                                           opCabeceraTransaccionesAcumuladas.getNombreReferencia(),
+                                                           null, //descripcionLargaoGlosa, 
+                                                           null, //paisOrigenTransaccion, 
+                                                           null, //paisDestinoTransaccion, 
+                                                           null, //ubigeoOrigenTransaccion, 
+                                                           null, //ubigeoDestinoTransaccion, 
+                                                           null, //indicadorNacionalInternacional, 
+                                                           null, //empresaOrigen, 
+                                                           null, //empresaDestino, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna01(), //columna01, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna02(), //columna02, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna03(), //columna03, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna04(), //columna04, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna05(), //columna05, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna06(), //columna06, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna07(), //columna07, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna08(), //columna08, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna09(), //columna09, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna10(), //columna10, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna11(), //columna11, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna12(), //columna12, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna13(), //columna13, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna14(), //columna14, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna15(), //columna15, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna16(), //columna16, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna17(), //columna17, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna18(), //columna18, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna19(), //columna19, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna20(), //columna20, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna21(), //columna21, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna22(), //columna22, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna23(), //columna23, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna24(), //columna24, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna25(), //columna25, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna26(), //columna26, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna27(), //columna27, 
+                                                           columna28, //fvalle 23.10.2013 Ticket 7101 // opCabeceraTransaccionesAcumuladas.getColumna28()
+                                                           opCabeceraTransaccionesAcumuladas.getColumna29(), //columna29, 
+                                                           opCabeceraTransaccionesAcumuladas.getColumna30(), //columna30, 
+                                                           lstSubConceptos,
+                                                           "N",
+                                                           "N",
+                                                           "N",
+                                                           "N",
+                                                           "A", //indicadoRegularizacion, 
+                                                           usuario,
+                                                           terminal,
+                                                           ip);
+
+                String errorCode = mapPago.get("strError").toString();
+                if (!errorCode.equals(NO_ERROR)) {
+                    sessionContext.setRollbackOnly();
+                    cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario,
+                                                                         opCabeceraTransaccionesAcumuladas.getDocumentoReferencia(),
+                                                                         moduleName,
+                                                                         errorCode,
+                                                                         "");
+                    output.put("strError", errorCode);
                     return output;
+                }
+                //hpajuelo 21.06.2011 Se actualiza los valores de anulacion en las operaciones relacionadas originales
+                movimiento = opCabeceraTransaccionesDiariasInterfaceLocal.findById(opCabeceraTransaccionesAcumuladas.getNumeroTransaccion());
+                movimiento.setTipoRegularizacion(tipoRegularizacion);
+                movimiento.setEstadoRegularizacion("A");
+                if (motivoRegularizacion != null && !motivoRegularizacion.equals("")) {
+                    OPMotivoReguLarizacion opMotivoReguLarizacion = new OPMotivoReguLarizacion();
+                    opMotivoReguLarizacion.setMotivoRegularizacion(motivoRegularizacion);
+                    movimiento.setOpMotivoReguLarizacion(opMotivoReguLarizacion);
+                }
+                movimiento.setObservacionRegularizacion(observacionRegularizacion != null ? observacionRegularizacion.toUpperCase() : "");
+                opCabeceraTransaccionesAcumuladas.setTipoRegularizacion(tipoRegularizacion);
+                opCabeceraTransaccionesAcumuladas.setEstadoRegularizacion("A");
+                if (motivoRegularizacion != null && !motivoRegularizacion.equals("")) {
+                    OPMotivoReguLarizacion opMotivoReguLarizacion = new OPMotivoReguLarizacion();
+                    opMotivoReguLarizacion.setMotivoRegularizacion(motivoRegularizacion);
+                    opCabeceraTransaccionesAcumuladas.setOpMotivoReguLarizacion(opMotivoReguLarizacion);
+                }
+                if (opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera().equals("404") || opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera().equals("402")) {
+                    movimiento.setEstadoRegistro("N");
+                    opCabeceraTransaccionesAcumuladas.setEstadoRegistro("N");
+                }
+                opCabeceraTransaccionesDiariasInterfaceLocal.update(movimiento);
+                opCabeceraTransaccionesAcumuladasInterfaceLocal.update(opCabeceraTransaccionesAcumuladas);
+
+                //Inicio [Req.17-033] acnunez 16.06.2017
+                if (opCabeceraTransaccionesAcumuladas.getCodigoOperacion().equals(Constante.CODIGO_OPERACION_PAGO_CARGO_A_CUENTA)) {
+                    if (!_isEmpty(_toStr(opCabeceraTransaccionesAcumuladas.getDocumentoReferencia()))) {
+                        respuestaDeposito = depositoPorAnulacionPagoCredito(opCabeceraTransaccionesAcumuladas.getDocumentoReferencia().toString(),
+                                                                            montoMovimientoConITF,
+                                                                            codigoAgencia,
+                                                                            beanParametrosAuditoria);
+                        if (!_equiv(respuestaDeposito, NO_ERROR)){
+                            throw new ErrorControladoException(respuestaDeposito);
+                        }
+                    }
+                }
+                //Fin [Req.17-033]
             }
-            //hpajuelo 21.06.2011 Se actualiza los valores de anulacion en las operaciones relacionadas originales
-            movimiento = opCabeceraTransaccionesDiariasInterfaceLocal.findById(opCabeceraTransaccionesAcumuladas.getNumeroTransaccion());
-            movimiento.setTipoRegularizacion(tipoRegularizacion);
-            movimiento.setEstadoRegularizacion("A");
-            if(motivoRegularizacion!=null && !motivoRegularizacion.equals("")){
-               OPMotivoReguLarizacion opMotivoReguLarizacion=new OPMotivoReguLarizacion();
-               opMotivoReguLarizacion.setMotivoRegularizacion(motivoRegularizacion);
-               movimiento.setOpMotivoReguLarizacion(opMotivoReguLarizacion);
-            }
-            movimiento.setObservacionRegularizacion(observacionRegularizacion!=null?observacionRegularizacion.toUpperCase():"");
-            opCabeceraTransaccionesAcumuladas.setTipoRegularizacion(tipoRegularizacion);
-            opCabeceraTransaccionesAcumuladas.setEstadoRegularizacion("A");
-            if(motivoRegularizacion!=null && !motivoRegularizacion.equals("")){
-               OPMotivoReguLarizacion opMotivoReguLarizacion=new OPMotivoReguLarizacion();
-               opMotivoReguLarizacion.setMotivoRegularizacion(motivoRegularizacion);
-               opCabeceraTransaccionesAcumuladas.setOpMotivoReguLarizacion(opMotivoReguLarizacion);
-            }
-            if(opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera().equals("404") ||  opCabeceraTransaccionesAcumuladas.getConceptoOperacionFinanciera().equals("402")){
-               movimiento.setEstadoRegistro("N");
-               opCabeceraTransaccionesAcumuladas.setEstadoRegistro("N");
-            }
-            opCabeceraTransaccionesDiariasInterfaceLocal.update(movimiento);
-            opCabeceraTransaccionesAcumuladasInterfaceLocal.update(opCabeceraTransaccionesAcumuladas);
-            
-           }
-         output.put("numeroTransaccionAnulacion", numeroTransaccionAnulacion);
-        }catch (Exception e){
-         e.printStackTrace();
+
+            output.put("numeroTransaccionAnulacion", numeroTransaccionAnulacion);
+        } catch (Exception e) {
+            e.printStackTrace();
             cbControlErroresFacadeInterfaceLocal.crearLogErrores(usuario, moduleName, e.getMessage());
             throw new Exception(e.getMessage());
         }
@@ -3914,4 +3981,99 @@
         return output;
     }
     //Fin [Req.17-031]
+    
+  //Inicio [Req.17-033] acnunez 16.06.2017
+    private String depositoPorAnulacionPagoCredito(String numeroCuenta,
+                                                  Double montoMovimiento,
+                                                  String codAgencia,
+                                                  BeanParametrosAuditoria beanParametrosAuditoria) throws Exception {
+        String respuestaDeposito = NO_ERROR;
+        Map mapDeposito = new HashMap();
+        Map mapListaImpuestos = new HashMap();
+        List lstExonerados = new ArrayList();
+        BeanOPExonerados beanOPExonerados = new BeanOPExonerados();
+        CPCuentasPasivasFacadeLocal cpCuentasPasivasFacadeLocal = null;
+        String numeroTx;
+        Long numeroCorrelativoOperacion;
+        String modulo = "OPBNTransaccionesFacade.depositoPorAnulacionPagoCredito";
+
+        try {
+            CPMaestroCuentas cpMaestroCuentas = cpMaestroCuentasInterfaceLocal.findById(numeroCuenta);
+
+            if (!_isEmpty(cpMaestroCuentas)) {
+                numeroTx = cbCorrelativoInterfaceLocal.GenerarCorrelativo(Constante.ID_TFC,
+                                                                          "OPMTRAD",
+                                                                          15,
+                                                                          beanParametrosAuditoria.getUsuarioInsercion(),
+                                                                          beanParametrosAuditoria.getTerminalInsercion(),
+                                                                          beanParametrosAuditoria.getIpInsercion());
+                numeroCorrelativoOperacion = opBNCorrelativoTransaccionesFacadeInterfaceLocal.generar(Constante.ID_TFC,
+                                                                                                      codAgencia,
+                                                                                                      FormatoFecha.dateUtilToSQLDate(beanParametrosAuditoria.getFechaProceso()),
+                                                                                                      beanParametrosAuditoria.getUsuarioInsercion(),
+                                                                                                      beanParametrosAuditoria.getTerminalInsercion(),
+                                                                                                      beanParametrosAuditoria.getIpInsercion());
+
+                List lstImpuestos = new ArrayList();
+                Vector vCheque = new Vector();
+                Vector vVoucher = new Vector();
+
+                cpCuentasPasivasFacadeLocal = (CPCuentasPasivasFacadeLocal) lookup(CPCuentasPasivasFacade.LocalJNDIName);
+                mapDeposito = cpCuentasPasivasFacadeLocal.deposito(Constante.ID_TFC,
+                                                                   codAgencia,
+                                                                   cpMaestroCuentas.getClClientes().getCodigoCliente(),
+                                                                   Constante.CONCEPTO_OPERACION_REGULARIZACION_REV_PAG_CRE,
+                                                                   Constante.SUBCONCEPTO_OPERACION_REGULARIZACION_REV_PAG_CRE,
+                                                                   FormatoFecha.dateUtilToSQLDate(beanParametrosAuditoria.getFechaProceso()),
+                                                                   FormatoFecha.obtenerHora(),
+                                                                   cpMaestroCuentas.getCodigoMoneda(),
+                                                                   montoMovimiento,
+                                                                   montoMovimiento,
+                                                                   cpMaestroCuentas.getNumeroCuenta(),
+                                                                   Double.valueOf(1.0),
+                                                                   null,
+                                                                   null,
+                                                                   "N",
+                                                                   Constante.TIPO_NOTA_ABONO,
+                                                                   "N",
+                                                                   "",
+                                                                   "",
+                                                                   Long.valueOf(numeroTx),
+                                                                   numeroCorrelativoOperacion,
+                                                                   numeroTx,
+                                                                   "S",
+                                                                   vCheque, //cheque
+                                                                   vVoucher, //voucher
+                                                                   "", //vCtaCble,
+                                                                   "", //entidad manejadora de valores
+                                                                   null,
+                                                                   lstImpuestos, //lstImpuestos,
+                                                                   beanParametrosAuditoria.getUsuarioInsercion(),
+                                                                   beanParametrosAuditoria.getTerminalInsercion(),
+                                                                   beanParametrosAuditoria.getIpInsercion(),
+                                                                   null, //remuneracion acumulada
+                                                                   "",
+                                                                   "",
+                                                                   "",
+                                                                   "0",
+                                                                   null,
+                                                                   Constante.COD_OPE_FIN_ANU_RET,
+                                                                   "",
+                                                                   "",
+                                                                   "",
+                                                                   null,
+                                                                   "",
+                                                                   "N",
+                                                                   null,
+                                                                   null);
+
+                respuestaDeposito = mapDeposito.get("strError").toString();
+            }
+        } catch (Exception e) {
+            handlerError(e, beanParametrosAuditoria.getUsuarioInsercion(), modulo);
+            respuestaDeposito = ERROR_NO_CONTROLADO;
+        }
+        return respuestaDeposito;
+    }
+  //Fin [Req.17-033]
 }
\ No newline at end of file
diff --git a/FINANCIERONEW/src/financ/util/Constante.java b/FINANCIERONEW/src/financ/util/Constante.java
index b0c8c4d..94f0369 100644
--- a/FINANCIERONEW/src/financ/util/Constante.java
+++ b/FINANCIERONEW/src/financ/util/Constante.java
@@ -2570,7 +2570,12 @@
     //Inicio [Req.17-033] acnunez 01.06.2017
     public static final String CONCEPTO_OPERACION_CASTIGO_INTERES = "OP102";
     public static final String CONCEPTO_OPERACION_CASTIGO_CAPITAL = "OP151";
-    public static final String SUBCONCEPTO_OPERACION_CASTIGO_CAPITAL = "143OP151998";
+    public static final String CONCEPTO_OPERACION_REGULARIZACION_REV_PAG_CRE = "OP152";
+    public static final String SUBCONCEPTO_OPERACION_CASTIGO_CAPITAL = "143OP151999";
+    public static final String SUBCONCEPTO_OPERACION_REGULARIZACION_REV_PAG_CRE = "143OP152999";
     public static final String CODIGO_PROCESO_APERTURA = "14303";
+    public static final String COD_OPE_FIN_ANU_RET= "594";
+    public static final String INDICADOR_NO_LUCRATIVO = "N";
+    public static final String TIPO_NOTA_ABONO = "NB";
     //Fin [Req.17-033]
 }
